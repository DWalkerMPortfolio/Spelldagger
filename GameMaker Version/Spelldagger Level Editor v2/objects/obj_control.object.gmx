<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables

version=2

//draw setup
window_set_size(1000,1000)
draw_set_font(fn_font)
draw_set_circle_precision(8)
gridScale=32

//GUI setup
display_set_gui_size(view_wview[0],view_hview[0])

//general
modeNumber=0
mode[0]="line"
mode[1]="texture"
mode[2]="object"
mode[3]="data"
mode[4]="select"

roundX=0
roundY=0
roundXPrevious=0
roundYPrevious=0
windowMouseXPrevious=0
windowMouseYPrevious=0
sectorWidth=960
sectorHeight=576
maxSectorX=10
maxSectorY=10
layer=2
layerPrevious=layer
maxLayer=5

//room setup
room_width=sectorWidth*maxSectorX
room_height=sectorHeight*maxSectorY

//grids
var gridCreateIndex=0
for (gridCreateIndex=0; gridCreateIndex&lt;=5; gridCreateIndex+=1)
    {
    wallGrid[gridCreateIndex]=ds_grid_create(4,0)
    detailGrid[gridCreateIndex]=ds_grid_create(4,0)
    instanceGrid[gridCreateIndex]=ds_grid_create(5,0)
    textureGrid[gridCreateIndex]=ds_grid_create(1,0)
    }
objectGrid=ds_grid_create(5,0)
pathGrid=ds_grid_create(1,0)
dataMap=ds_map_create()

//maps
documentMap=ds_map_create()
keyMap=ds_map_create()
    
//line
lineModeNumber=0
lineMode[0]="wall"
lineMode[1]="detail"
lineCursorX=-1
lineCursorY=-1

//texture
textureSheetNumber=6
spr_textureSheet=sprite_add("textureSheet.png",textureSheetNumber,false,false,0,0)
textureNumber=0
texturePointNumber=1

//object
objectGridNumber=0
objectNumber=0
objectRotation=0
displayName=false

objectCategory[0]="Props"
objectCategory[1]="Interactable"
objectCategory[2]="Other"
objectCategoryNumber=0

instanceID=1

//select
selectModeNumber=0
selectMode[0]="one layer"
selectMode[1]="all layers"

selectPoints[0,0]=-1
selectPoints[1,0]=-1
selectPoints[0,1]=-1
selectPoints[1,1]=-1

minSelectLayer=0
maxSelectLayer=0

selectRowsWall=array_create(0)
selectRowsDetail=array_create(0)
selectRowsInstance=array_create(0)
selectRowsTexture=array_create(0)

//data
dataModeNumber=0
dataMode[0]="path"
dataMode[1]="document"
dataMode[2]="other"

pathInstanceID=-1
pathInstanceX=-1
pathInstanceY=-1
pathNumber=-1
pathPointNumber=1

currentDocument=ds_map_find_first(documentMap)
documentToModify=""

dataInstanceMap=0
dataTextboxID=-2
dataToModify=""

//textbox
textboxID=-1
textReturned=-1
textReturn=""
textReceived=false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///general

//roundX + roundY
roundXPrevious=roundX
roundYPrevious=roundY

roundX=round(mouse_x/gridScale)*gridScale
roundY=round(mouse_y/gridScale)*gridScale

//copy coordinates
if keyboard_check_pressed(ord("P"))
    clipboard_set_text("x="+string(roundX)+"
y="+string(roundY+layer*maxSectorY*sectorHeight))

//mode
if keyboard_check_pressed(vk_shift)
    {
    modeNumber+=1
    if modeNumber&gt;array_length_1d(mode)-1
        modeNumber=0
    }
    
//grid value
if keyboard_check_pressed(ord("G"))
    {
    if gridScale=32
        {
        gridScale=16
        background_index[0]=bg_gridSmall
        }
    else if gridScale=16
        {
        gridScale=32
        background_index[0]=bg_grid
        }
    }

//zoom
if mouse_wheel_up()
    {
    view_wview[0]/=2
    view_hview[0]/=2
    }
else if mouse_wheel_down()
    {
    view_wview[0]*=2
    view_hview[0]*=2
    }
    
view_wview[0]=clamp(view_wview[0],250,8000)
view_hview[0]=clamp(view_wview[0],250,8000)

//scroll
if mouse_check_button(mb_middle)
    {
    view_xview[0]-=(window_mouse_get_x()-windowMouseXPrevious)*(view_wview[0]/window_get_width())
    view_yview[0]-=(window_mouse_get_y()-windowMouseYPrevious)*(view_hview[0]/window_get_width())
    }
view_xview[0]=clamp(view_xview[0],0,max(0,room_width-view_wview[0]))
view_yview[0]=clamp(view_yview[0],0,max(0,room_height-view_hview[0]))

windowMouseXPrevious=window_mouse_get_x()
windowMouseYPrevious=window_mouse_get_y()

//sectors
if keyboard_check_pressed(ord("T"))
    {
    sectorWidth=get_integer("Sector Width",sectorWidth)
    sectorHeight=get_integer("Sector Height",sectorHeight)
    }
    
if keyboard_check_pressed(ord("M"))
    {
    maxSectorX=get_integer("Max Sector X",maxSectorX)
    maxSectorY=get_integer("Max Sector Y",maxSectorY)
    room_width=sectorWidth*maxSectorX
    room_height=sectorHeight*maxSectorY
    }
    
//layers
layerPrevious=layer
if lineCursorX=-1 and texturePointNumber=1
    {
    if keyboard_check_pressed(vk_up)
        layer+=1
    else if keyboard_check_pressed(vk_down)
        layer-=1
    if layer&gt;maxLayer
        layer=0
    else if layer&lt;0
        layer=maxLayer
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///line

if mode[modeNumber]="line"
    {
    //change line mode
    if keyboard_check_pressed(vk_tab)
        {
        lineModeNumber+=1
        if lineModeNumber&gt;array_length_1d(lineMode)-1
            lineModeNumber=0
        }
    
    //set line grid
    if lineMode[lineModeNumber]="wall"
        var lineGrid=wallGrid[layer]
    else if lineMode[lineModeNumber]="detail"
        var lineGrid=detailGrid[layer]
    
    //create line
    if mouse_check_button_pressed(mb_left)
        {
        if lineCursorX=-1
            {
            lineCursorX=roundX
            lineCursorY=roundY
            }
        else
            {
            ds_grid_resize(lineGrid,ds_grid_width(lineGrid),ds_grid_height(lineGrid)+1)
            ds_grid_set(lineGrid,0,ds_grid_height(lineGrid)-1,lineCursorX)
            ds_grid_set(lineGrid,1,ds_grid_height(lineGrid)-1,lineCursorY)
            ds_grid_set(lineGrid,2,ds_grid_height(lineGrid)-1,roundX)
            ds_grid_set(lineGrid,3,ds_grid_height(lineGrid)-1,roundY)
            lineCursorX=roundX
            lineCursorY=roundY
            }
        }
    
    //delete line
    else if mouse_check_button_pressed(mb_right)
        {
        lineCursorX=-1
        lineCursorY=-1
        if ds_grid_value_exists(lineGrid,0,0,0,ds_grid_height(lineGrid),roundX) and ds_grid_value_exists(lineGrid,1,0,1,ds_grid_height(lineGrid),roundY)
            {
            var foundRow=scr_findRow(lineGrid,0,roundX,1,roundY)
            if foundRow&gt;=0
                scr_deleteRow(lineGrid,foundRow)
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///texture

if mode[modeNumber]="texture"
    {
    //import texture sheet
    if keyboard_check_pressed(ord("I"))
        spr_textureSheet=sprite_add(get_open_filename("image |*.png","textureSheet.png"),get_integer("Texture Number",4),false,false,0,0)
    
    else if sprite_exists(spr_textureSheet)
        {
        //change texture
        if keyboard_check_pressed(vk_tab)
            {
            textureNumber+=1
            if textureNumber&gt;sprite_get_number(spr_textureSheet)-1
                textureNumber=0
            }
        //creature texture polygon
        if mouse_check_button_pressed(mb_left)
            {
            if texturePointNumber=1
                {
                ds_grid_resize(textureGrid[layer],ds_grid_width(textureGrid[layer]),ds_grid_height(textureGrid[layer])+1)
                ds_grid_set_region(textureGrid[layer],0,ds_grid_height(textureGrid[layer])-1,ds_grid_width(textureGrid[layer])-1,ds_grid_height(textureGrid[layer])-1,"empty")
                ds_grid_set(textureGrid[layer],0,ds_grid_height(textureGrid[layer])-1,textureNumber)
                }
            if ds_grid_width(textureGrid[layer])&lt;texturePointNumber+2
                {
                ds_grid_resize(textureGrid[layer],texturePointNumber+2,ds_grid_height(textureGrid[layer]))
                ds_grid_set_region(textureGrid[layer],ds_grid_width(textureGrid[layer])-2,0,ds_grid_width(textureGrid[layer])-1,ds_grid_height(textureGrid[layer]),"empty")
                }
            ds_grid_set(textureGrid[layer],texturePointNumber,ds_grid_height(textureGrid[layer])-1,roundX)
            ds_grid_set(textureGrid[layer],texturePointNumber+1,ds_grid_height(textureGrid[layer])-1,roundY)
            texturePointNumber+=2
            }
        
        //delete texture polygon    
        if mouse_check_button(mb_right)
            {
            texturePointNumber=1
            if ds_grid_value_exists(textureGrid[layer],1,0,1,ds_grid_height(textureGrid[layer])-1,roundX) and ds_grid_value_exists(textureGrid[layer],2,0,2,ds_grid_height(textureGrid[layer])-1,roundY)
                {
                var foundRow=scr_findRow(textureGrid[layer],1,roundX,2,roundY)
                if foundRow&gt;=0
                    {
                    scr_deleteRow(textureGrid[layer],foundRow)
                    scr_condenseGrid(textureGrid[layer])
                    }
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///object

if mode[modeNumber]="object"
    {
    if ds_grid_height(objectGrid)&gt;0
        {
        //change object
        if keyboard_check_pressed(vk_tab) or ds_grid_get(objectGrid,3,objectNumber)!=objectCategoryNumber
            objectNumber+=1
        if objectNumber&gt;ds_grid_height(objectGrid)-1
            objectNumber=0
        
        //search for object
        if keyboard_check_pressed(ord("Q"))
            {
            var objectSearch=get_string("Search for Object","")
            for(var findObjectIndex=0; findObjectIndex&lt;ds_grid_height(objectGrid); findObjectIndex+=1)
                {
                if string_pos(objectSearch,ds_grid_get(objectGrid,1,findObjectIndex))!=0
                    {
                    objectNumber=findObjectIndex
                    objectCategoryNumber=ds_grid_get(objectGrid,3,objectNumber)
                    break;
                    }
                }
            }
        }
    
    //rotate object   
    if keyboard_check_pressed(vk_control) or keyboard_check_pressed(ord("Z"))
        {
        if keyboard_check_pressed(vk_control)
            objectRotation+=45
        else
            objectRotation+=15
        if objectRotation&gt;=360
            objectRotation-=360
        }
    
    //change category    
    else if keyboard_check_pressed(vk_alt)
        {
        objectCategoryNumber+=1
        if objectCategoryNumber&gt;array_length_1d(objectCategory)-1
            objectCategoryNumber=0
        }
        
    //toggle display name
    else if keyboard_check_pressed(ord("B"))
        displayName=!displayName
    
    //import new object
    else if keyboard_check_pressed(ord("I"))
        {
        ds_grid_resize(objectGrid,ds_grid_width(objectGrid),ds_grid_height(objectGrid)+1)
        objectNumber=ds_grid_height(objectGrid)-1
        var sprite=sprite_add(get_open_filename("image|*.png","sprite"),0,false,false,0,0)
        ds_grid_set(objectGrid,0,objectNumber,sprite)
        sprite_set_offset(ds_grid_get(objectGrid,0,objectNumber),sprite_get_width(ds_grid_get(objectGrid,0,objectNumber))/2,sprite_get_height(ds_grid_get(objectGrid,0,objectNumber))/2)
        ds_grid_set(objectGrid,1,objectNumber,get_string("Name",""))
        ds_grid_set(objectGrid,2,objectNumber,string_replace(ds_grid_get(objectGrid,1,objectNumber),"obj_","spr_")+"_0.png")
        var importCategory=get_integer("Category (0=Props, 1=Interactable, 2=Other)",0)
        ds_grid_set(objectGrid,3,objectNumber,importCategory)
        objectCategoryNumber=importCategory
        if importCategory=4
            ds_grid_set(objectGrid,4,objectNumber,200)
        else
            ds_grid_set(objectGrid,4,objectNumber,sprite_get_width(sprite)/2+1)
        }

    //rename object
    else if keyboard_check_pressed(ord("N"))
        {
        var oldName=ds_grid_get(objectGrid,1,objectNumber)
        var newName=get_string("Name",oldName)
        for (var j=0; j&lt;=5; j+=1)
            {
            for (var i=0; i&lt;ds_grid_height(instanceGrid[j]);i+=1)
                {
                if ds_grid_get(instanceGrid[j],0,i)=oldName
                    ds_grid_set(instanceGrid[j],0,i,newName)
                }
            ds_grid_set(objectGrid,1,objectNumber,newName)
            }
        }
    
    //change sprite filename of an object
    else if keyboard_check_pressed(ord("F"))
        ds_grid_set(objectGrid,2,objectNumber,get_string("Sprite Filename",ds_grid_get(objectGrid,2,objectNumber)))
    
    //change category of an object
    else if keyboard_check_pressed(ord("C"))
        ds_grid_set(objectGrid,3,objectNumber,get_integer("Category (0=Props, 1=Doors, 2=Keys, 3=Documents, 4=Guards, 5=Other",ds_grid_get(objectGrid,3,objectNumber)))
    
    //change origin of an object
    else if keyboard_check_pressed(ord("O"))
        {
        var xOrigin=get_integer("X Origin",sprite_get_width(ds_grid_get(objectGrid,0,objectNumber))/2)
        var yOrigin=get_integer("Y Origin",sprite_get_height(ds_grid_get(objectGrid,0,objectNumber))/2)
        sprite_set_offset(ds_grid_get(objectGrid,0,objectNumber),xOrigin,yOrigin)
        }
    
    //change range of influence of an object    
    else if keyboard_check_pressed(ord("R"))
        ds_grid_set(objectGrid,4,objectNumber,get_integer("Range of Influence",ds_grid_get(objectGrid,4,objectNumber)))
    
    //delete an object
    else if keyboard_check_pressed(vk_backspace)
        {
        var canDelete=true
        for (var i=0; i&lt;=maxLayer; i+=1)
            {
            if ds_grid_value_exists(instanceGrid[layer],0,0,0,ds_grid_height(instanceGrid[layer])-1,ds_grid_get(objectGrid,1,objectNumber))
                {
                canDelete=false
                break;
                }
            }
        if canDelete=true
            scr_deleteRow(objectGrid,objectNumber)
        }
    
    //create an instance    
    else if mouse_check_button_pressed(mb_left) and ds_grid_height(objectGrid)&gt;0
        {
        ds_grid_resize(instanceGrid[layer],ds_grid_width(instanceGrid[layer]),ds_grid_height(instanceGrid[layer])+1)
        ds_grid_set(instanceGrid[layer],0,ds_grid_height(instanceGrid[layer])-1,ds_grid_get(objectGrid,1,objectNumber))
        ds_grid_set(instanceGrid[layer],1,ds_grid_height(instanceGrid[layer])-1,roundX)
        ds_grid_set(instanceGrid[layer],2,ds_grid_height(instanceGrid[layer])-1,roundY)
        ds_grid_set(instanceGrid[layer],3,ds_grid_height(instanceGrid[layer])-1,objectRotation)
        ds_grid_set(instanceGrid[layer],4,ds_grid_height(instanceGrid[layer])-1,instanceID)
        instanceID+=1
        }
    
    //delete an instance    
    else if mouse_check_button_pressed(mb_right)
        {
        var deleteInstanceRow=scr_targetInstance(roundX,roundY,layer)
        if deleteInstanceRow&gt;=0
            {
            var deleteInstanceID=ds_grid_get(instanceGrid[layer],4,deleteInstanceRow)
            var deletePathRow=scr_findRow(pathGrid,0,deleteInstanceID)
            if deletePathRow&gt;=0
                scr_deleteRow(pathGrid,deletePathRow)
            var deleteInstanceMap=ds_map_find_value(dataMap,deleteInstanceID)
            if !is_undefined(deleteInstanceMap)
                {
                ds_map_destroy(deleteInstanceMap)
                ds_map_delete(dataMap,deleteInstanceID)
                }
            scr_deleteRow(instanceGrid[layer],deleteInstanceRow)
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///data

//get returned document text
if textReceived=false and textReturned=dataTextboxID
    {
    ds_map_replace(documentMap,documentToModify,scr_getReturnedText(dataTextboxID))
    currentDocument=documentToModify
    }

if mode[modeNumber]="data"
    {
    //change data mode
    if keyboard_check_pressed(vk_tab)
        dataModeNumber+=1
    if dataModeNumber&gt;=array_length_1d(dataMode)
        dataModeNumber=0
    else if dataModeNumber&lt;0
        dataModeNumber=array_length_1d(dataMode)-1
    
    if dataMode[dataModeNumber]="path"
        {
        //start path
        if pathNumber&lt;0 and mouse_check_button_pressed(mb_left)
            {
            //get targeted instance data
            var targetInstanceRow=scr_targetInstance(roundX,roundY,layer)
            if targetInstanceRow&gt;=0
                {
                pathInstanceID=ds_grid_get(instanceGrid[layer],4,targetInstanceRow)
                pathInstanceX=ds_grid_get(instanceGrid[layer],1,targetInstanceRow)
                pathInstanceY=ds_grid_get(instanceGrid[layer],2,targetInstanceRow)
                
                if pathInstanceID&gt;0
                    { 
                    //check for existing path
                    pathNumber=scr_findRow(pathGrid,0,pathInstanceID)
                    if pathNumber&gt;=0
                        {
                        for (var j=1; j&lt;ds_grid_width(pathGrid); j+=2)
                            {
                            if ds_grid_get(pathGrid,j,pathNumber)="empty"
                                break;
                            }
                        pathPointNumber=j
                        }
                    //create new path if no existing one is found
                    else
                        {
                        pathNumber=ds_grid_height(pathGrid)
                        ds_grid_resize(pathGrid,ds_grid_width(pathGrid),ds_grid_height(pathGrid)+1)
                        ds_grid_set_region(pathGrid,0,ds_grid_height(pathGrid)-1,ds_grid_width(pathGrid),ds_grid_height(pathGrid)-1,"empty")
                        ds_grid_set(pathGrid,0,pathNumber,pathInstanceID)
                        pathPointNumber=1
                        }
                    }
                }
            }
        else if pathNumber&gt;=0
            {
            //add points
            if mouse_check_button_pressed(mb_left)
                {
                if ds_grid_width(pathGrid)&lt;pathPointNumber+2
                    {
                    ds_grid_resize(pathGrid,pathPointNumber+2,ds_grid_height(pathGrid))
                    ds_grid_set_region(pathGrid,pathPointNumber,0,pathPointNumber+1,ds_grid_height(pathGrid),"empty")
                    }
                ds_grid_set(pathGrid,pathPointNumber,pathNumber,roundX-pathInstanceX)
                ds_grid_set(pathGrid,pathPointNumber+1,pathNumber,roundY-pathInstanceY)
                pathPointNumber+=2
                }
            }
        if mouse_check_button_pressed(mb_right)
            {
            //exit current path
            if pathNumber&gt;=0
                {
                pathNumber=-1
                pathInstanceID=-1
                pathPointNumber=1
                }
            else
                {
                for (var i=0; i&lt;ds_grid_height(pathGrid); i+=1)
                    {
                    var instanceRow=ds_grid_value_y(instanceGrid[layer],4,0,4,ds_grid_height(instanceGrid[layer]),ds_grid_get(pathGrid,0,i))
                    var instanceX=ds_grid_get(instanceGrid[layer],1,instanceRow)
                    var instanceY=ds_grid_get(instanceGrid[layer],2,instanceRow)
                    
                    //delete path
                    if roundX=instanceX and roundY=instanceY
                        scr_deleteRow(pathGrid,i)
                    //delete path points
                    else
                        {
                        for (var j=1; j+1&lt;ds_grid_width(pathGrid); j+=2)
                            {
                            if ds_grid_get(pathGrid,j,i)="empty"
                                break;
                            else if ds_grid_get(pathGrid,j,i)=roundX-instanceX and ds_grid_get(pathGrid,j+1,i)=roundY-instanceY
                                {
                                ds_grid_set_region(pathGrid,j,i,ds_grid_width(pathGrid)-1,i,"empty")
                                break;
                                }
                            }
                        //resize grid
                        scr_condenseGrid(pathGrid)
                        }
                    }
                }
            }
        }
    //document
    else if dataMode[dataModeNumber]="document"
        {
        //change document
        if keyboard_check_pressed(vk_alt)
            currentDocument=ds_map_find_next(documentMap,currentDocument)
        if is_undefined(currentDocument)
                currentDocument=ds_map_find_first(documentMap)
            
        //search for document
        if keyboard_check_pressed(ord("Q"))
            {
            var documentToSearch=get_string("Document to find:","")
            if ds_map_exists(documentMap,documentToSearch)
                currentDocument=documentToSearch
            }
        
        //select instance
        if mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right)
            {
            var dataInstanceID=-1
            var targetInstance=scr_targetInstance(roundX,roundY,layer)
            if targetInstance&gt;=0
                {
                dataInstanceID=ds_grid_get(instanceGrid[layer],4,targetInstance)
                if dataInstanceID&gt;0
                    var dataInstanceMap=scr_getInstanceDataMap(dataInstanceID)
                }
            }
            
        if mouse_check_button_pressed(mb_left)
            {
            //write document
            if dataInstanceID&lt;=0
                {
                documentToModify=get_string("Document title:","")
                var defaultText=ds_map_find_value(documentMap,documentToModify)
                if is_undefined(defaultText)
                    defaultText=""
                dataTextboxID=textboxID+1
                textboxID+=1
                scr_createTextbox(defaultText,dataTextboxID)
                }
                
            //add document
            if dataInstanceID&gt;0 and !is_undefined(currentDocument)
                ds_map_replace(dataInstanceMap,"document",currentDocument)
            }
            
        //remove document
        if mouse_check_button_pressed(mb_right) and dataInstanceID&gt;0
            {
            if ds_map_exists(dataInstanceMap,"document")
                {
                ds_map_delete(dataInstanceMap,"document")
                if ds_map_empty(dataInstanceMap)
                    {
                    ds_map_destroy(dataInstanceMap)
                    ds_map_delete(dataMap,dataInstanceID)
                    }
                }
            }
            
        //delete document
        if keyboard_check_pressed(vk_backspace)
            {
            var documentToDelete=get_string("Document to delete:","")
            if ds_map_exists(documentMap,documentToDelete)
                {
                if currentDocument=documentToDelete
                    currentDocument=ds_map_find_next(documentMap,currentDocument)
                ds_map_delete(documentMap,documentToDelete)
                //delete from all instances
                for (var i=0; i&lt;=maxLayer; i+=1)
                    {
                    for (var j=0; j&lt;ds_grid_height(instanceGrid[i]); j+=1)
                        {
                        var documentDeleteInstanceMap=ds_map_find_value(dataMap,ds_grid_get(instanceGrid[i],4,j))
                        if ds_map_find_value(documentDeleteInstanceMap,"document")=documentToDelete
                            {
                            ds_map_delete(documentDeleteInstanceMap,"document")
                            if ds_map_empty(dataInstanceMap)
                                {
                                ds_map_destroy(dataInstanceMap)
                                ds_map_delete(dataMap,dataInstanceID)
                                }
                            }
                        }
                    }
                }
            }
        }
    //other
    else if dataMode[dataModeNumber]="other"
        {
        //select instance
        if mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right)
            {
            var dataInstanceID=-1
            var targetInstance=scr_targetInstance(roundX,roundY,layer)
            if targetInstance&gt;=0
                dataInstanceID=ds_grid_get(instanceGrid[layer],4,targetInstance)
            }
        
        //add data
        if mouse_check_button_pressed(mb_left) and dataInstanceID&gt;=0
            {
            dataInstanceMap=scr_getInstanceDataMap(dataInstanceID)
            
            //get data to modify
            dataToModify=get_string("Data to modify:","")
            var dataTypeToModify=string_copy(dataToModify,string_length(dataToModify)-1,2)
            if dataTypeToModify=".s" or dataTypeToModify=".i"
                {
                if dataTypeToModify=".s"
                    var dataValue=get_string("Data value:","")
                else if dataTypeToModify=".i"
                    var dataValue=get_integer("Data value:",0)
                ds_map_replace(dataInstanceMap,dataToModify,dataValue)
                }
            else
                {
                show_message("Invalid data: "+dataToModify+". Type: "+dataTypeToModify)
                if ds_map_empty(dataInstanceMap)
                    {
                    ds_map_destroy(dataInstanceMap)
                    ds_map_delete(dataMap,dataInstanceID)
                    }
                }
            }
        //delete data
        else if mouse_check_button_pressed(mb_right) and ds_map_exists(dataMap,dataInstanceID)
            {
            dataInstanceMap=ds_map_find_value(dataMap,dataInstanceID)
            
            //get data to delete
            var dataToDelete=get_string("Data to delete (key.i, title.s, etc.):","")
            if ds_map_exists(dataInstanceMap,dataToDelete)
                {
                ds_map_delete(dataInstanceMap,dataToDelete)
                if ds_map_empty(dataInstanceMap)
                    {
                    ds_map_destroy(dataInstanceMap)
                    ds_map_delete(dataMap,dataInstanceID)
                    }
                }
            else
                show_message("Data does not exist: "+dataToDelete)
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///select

if mode[modeNumber]="select"
    {
    //change select mode
    if keyboard_check_pressed(vk_tab) and selectPoints[0,0]=-1 and selectPoints[1,1]=-1
        {
        selectModeNumber+=1
        if selectModeNumber&gt;=array_length_1d(selectMode)
            selectModeNumber=0
        }
    
    if mouse_check_button_pressed(mb_left)
        {
        //start selection (define first point)
        if selectPoints[0,0]=-1
            {
            selectPoints[0,0]=roundX
            selectPoints[1,0]=roundY
            }
        //define second point
        else if roundX!=selectPoints[0,0] and roundY!=selectPoints[0,1] and selectPoints[0,1]=-1
            {
            selectPoints[0,1]=max(selectPoints[0,0],roundX)
            if selectPoints[0,1]=selectPoints[0,0]
                selectPoints[0,0]=roundX
            selectPoints[1,1]=max(selectPoints[1,0],roundY)
            if selectPoints[1,1]=selectPoints[1,0]
                selectPoints[1,0]=roundY
            
            if selectMode[selectModeNumber]="one layer"
                {
                minSelectLayer=layer
                maxSelectLayer=layer
                }
            else
                {
                minSelectLayer=0
                maxSelectLayer=maxLayer
                }
            
            //determine selected grid rows
            selectRowsWall=scr_selectRows(wallGrid,minSelectLayer,maxSelectLayer,selectPoints,0,1)
            selectRowsDetail=scr_selectRows(detailGrid,minSelectLayer,maxSelectLayer,selectPoints,0,1)
            selectRowsTexture=scr_selectRows(textureGrid,minSelectLayer,maxSelectLayer,selectPoints,1,2)
            selectRowsInstance=scr_selectRows(instanceGrid,minSelectLayer,maxSelectLayer,selectPoints,1,2)
            }
        }
    if selectPoints[0,0]!=-1 and selectPoints[1,1]!=-1
        {
        //move selection layer
        if layer!=layerPrevious and selectMode[selectModeNumber]="one layer"
            {
            scr_moveSelectionLayer(wallGrid,selectRowsWall,layer,layerPrevious)
            scr_moveSelectionLayer(detailGrid,selectRowsDetail,layer,layerPrevious)
            scr_moveSelectionLayer(textureGrid,selectRowsTexture,layer,layerPrevious)
            scr_moveSelectionLayer(instanceGrid,selectRowsInstance,layer,layerPrevious)
            }
        //move selection
        else if mouse_check_button(mb_left)
            {
            var selectOffsetX=roundX-roundXPrevious;
            var selectOffsetY=roundY-roundYPrevious;
            
            selectPoints[0,0]+=selectOffsetX
            selectPoints[1,0]+=selectOffsetY
            selectPoints[0,1]+=selectOffsetX
            selectPoints[1,1]+=selectOffsetY
            
            scr_moveSelection(wallGrid,selectRowsWall,selectOffsetX,selectOffsetY,0,2)
            scr_moveSelection(detailGrid,selectRowsDetail,selectOffsetX,selectOffsetY,0,2)
            scr_moveSelection(textureGrid,selectRowsTexture,selectOffsetX,selectOffsetY,1)
            scr_moveSelection(instanceGrid,selectRowsInstance,selectOffsetX,selectOffsetY,1,1)
            }
        //delete selection
        else if keyboard_check_pressed(vk_backspace)
            {
            scr_deleteSelection(wallGrid,selectRowsWall)
            scr_deleteSelection(detailGrid,selectRowsDetail)
            scr_deleteSelection(textureGrid,selectRowsTexture)
            scr_deleteSelection(instanceGrid,selectRowsInstance)
            }
            
        //clear selection
        if mouse_check_button_pressed(mb_right) or keyboard_check_pressed(vk_backspace)
            {
            selectPoints[0,0]=-1
            selectPoints[1,0]=-1
            selectPoints[0,1]=-1
            selectPoints[1,1]=-1
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///saving

if keyboard_check_pressed(ord("S"))
    {
    //find editor data file
    ini_open(get_save_filename("ini |*.ini","levelEditorData.ini"))
    
    //save grids
    var saveLayer=0
    for (saveLayer=0; saveLayer&lt;=5; saveLayer+=1)
        {
        ini_write_string(string(saveLayer),"wall",ds_grid_write(wallGrid[saveLayer]))
        ini_write_string(string(saveLayer),"detail",ds_grid_write(detailGrid[saveLayer]))
        ini_write_string(string(saveLayer),"texture",ds_grid_write(textureGrid[saveLayer]))
        ini_write_string(string(saveLayer),"instance",ds_grid_write(instanceGrid[saveLayer]))
        }
        
    //save data
    var saveDataMap=ds_map_create()
    var key=ds_map_find_first(dataMap)
    while !is_undefined(key)
        {
        ds_map_add(saveDataMap,key,ds_map_write(ds_map_find_value(dataMap,key)))
        key=ds_map_find_next(dataMap,key)
        }
    ini_write_string("config","data",ds_map_write(saveDataMap))
    ds_map_destroy(saveDataMap)
    
    //save general data
    ini_write_string("config","object",ds_grid_write(objectGrid))
    ini_write_string("config","path",ds_grid_write(pathGrid))
    ini_write_string("config","document",ds_map_write(documentMap))
    ini_write_real("config","sectorWidth",sectorWidth)
    ini_write_real("config","sectorHeight",sectorHeight)
    ini_write_real("config","maxSectorX",maxSectorX)
    ini_write_real("config","maxSectorY",maxSectorY)
    ini_write_real("config","instanceID",instanceID+1)
    ini_write_real("config","version",version)
    ini_close()
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///loading

if keyboard_check_pressed(ord("L"))
    {
    //load texture sheet
    spr_textureSheet=sprite_add(get_open_filename("image |*.png","textureSheet.png"),get_integer("Texture Number",textureSheetNumber),false,false,0,0)
    
    //find editor data file
    ini_open(get_open_filename("ini |*.ini","levelEditorData.ini"))
    
    //load grids
    var loadLayer=0
    for (loadLayer=0; loadLayer&lt;=5; loadLayer+=1)
        {
        ds_grid_read(wallGrid[loadLayer],ini_read_string(string(loadLayer),"wall",""))
        ds_grid_read(detailGrid[loadLayer],ini_read_string(string(loadLayer),"detail",""))
        ds_grid_read(textureGrid[loadLayer],ini_read_string(string(loadLayer),"texture",""))
        ds_grid_read(instanceGrid[loadLayer],ini_read_string(string(loadLayer),"instance",""))
        }
    
    //load data
    ds_map_read(dataMap,ini_read_string("config","data",""))
    var key=ds_map_find_first(dataMap)
    while !is_undefined(key)
        {
        var loadInstanceDataMap=ds_map_create()
        ds_map_read(loadInstanceDataMap,ds_map_find_value(dataMap,key))
        ds_map_replace(dataMap,key,loadInstanceDataMap)
        key=ds_map_find_next(dataMap,key)
        }
    
    //load config data
    ds_grid_read(objectGrid,ini_read_string("config","object",""))
    ds_grid_read(pathGrid,ini_read_string("config","path",""))
    ds_map_read(documentMap,ini_read_string("config","document",""))
    sectorWidth=ini_read_real("config","sectorWidth",sectorWidth)
    sectorHeight=ini_read_real("config","sectorHeight",sectorHeight)
    maxSectorX=ini_read_real("config","maxSectorX",maxSectorX)
    maxSectorY=ini_read_real("config","maxSectorY",maxSectorY)
    instanceID=ini_read_real("config","instanceID",instanceID)
    version=ini_read_real("config","version",0)
    
    //load sprites
    var loadObjectSpriteValue=0
    while loadObjectSpriteValue&lt;ds_grid_height(objectGrid)
        {
        if !is_string(ds_grid_get(objectGrid,2,loadObjectSpriteValue))
            {
            var loadObjectSpriteFilename=get_open_filename("image|*.png",string_replace(ds_grid_get(objectGrid,1,loadObjectSpriteValue),"obj_","spr_")+"_0.png")
            ds_grid_set(objectGrid,2,loadObjectSpriteValue,loadObjectSpriteFilename)
            ds_grid_set(objectGrid,0,loadObjectSpriteValue,sprite_add(loadObjectSpriteFilename,1,false,false,0,0))
            sprite_set_offset(ds_grid_get(objectGrid,0,loadObjectSpriteValue),sprite_get_width(ds_grid_get(objectGrid,0,loadObjectSpriteValue))/2,sprite_get_height(ds_grid_get(objectGrid,0,loadObjectSpriteValue))/2)
            }
        else
            {
            ds_grid_set(objectGrid,0,loadObjectSpriteValue,sprite_add(get_open_filename("image|*.png",ds_grid_get(objectGrid,2,loadObjectSpriteValue)),1,false,false,0,0))
            sprite_set_offset(ds_grid_get(objectGrid,0,loadObjectSpriteValue),sprite_get_width(ds_grid_get(objectGrid,0,loadObjectSpriteValue))/2,sprite_get_height(ds_grid_get(objectGrid,0,loadObjectSpriteValue))/2)
            }
        loadObjectSpriteValue+=1
        }
    ini_close()
    
    //version conversions
    if version&lt;1
        {
        for (var i=0; i&lt;maxLayer; i+=1)
            {
            //change -1 to empty in texture grid
            for (var j=0; j&lt;ds_grid_height(textureGrid[i]); j+=1)
                {
                for (var k=1; k&lt;ds_grid_width(textureGrid[i]); k+=1)
                    {
                    if ds_grid_get(textureGrid[i],k,j)=-1
                        ds_grid_set(textureGrid[i],k,j,"empty")
                    }
                }
            //increase all instance IDs by 1
            for (var j=0; j&lt;ds_grid_height(instanceGrid[i]); j+=1)
                ds_grid_set(instanceGrid[i],k,j,ds_grid_get(instanceGrid[i],4,j)+1)
            }
        version=1
        }
        
    if version&lt;2
        {
        //change object categories
        /*for (var i=0; i&lt;ds_grid_height(objectGrid); i+=1)
            {
            if ds_grid_get(objectGrid,3,i)&gt;2
                ds_grid_set(objectGrid,3,i,2)
            }*/
        version=2
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///exporting
if keyboard_check_pressed(ord("E"))
    {
    ini_open(get_save_filename("ini |*.ini","levelData"))
    
    //grids
    scr_exportGrid(wallGrid,"wall",false,true,0,2)
    scr_exportGrid(detailGrid,"detail",false,true,0,2)
    scr_exportGrid(textureGrid,"texture",false,false,1)
    scr_exportGrid(instanceGrid,"instance",true,false,1,1)
    
    //data
    //path and document
    ini_write_string("data","path",ds_grid_write(pathGrid))
    ini_write_string("data","document",ds_map_write(documentMap))
    //other
    var exportDataMap=ds_map_create()
    var key=ds_map_find_first(dataMap)
    while !is_undefined(key)
        {
        ds_map_add(exportDataMap,key,ds_map_write(ds_map_find_value(dataMap,key)))
        key=ds_map_find_next(dataMap,key)
        }
    ini_write_string("data","other",ds_map_write(exportDataMap))
    ds_map_destroy(exportDataMap)
    
    ini_close()
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    //Old export system (for reference if something breaks)
    /*var maxWallGridHeight=max(ds_grid_height(wallGrid[0]),ds_grid_height(wallGrid[1]),ds_grid_height(wallGrid[2]),ds_grid_height(wallGrid[3]),ds_grid_height(wallGrid[4]),ds_grid_height(wallGrid[5]))
    var maxInstanceGridHeight=max(ds_grid_height(instanceGrid[0]),ds_grid_height(instanceGrid[1]),ds_grid_height(instanceGrid[2]),ds_grid_height(instanceGrid[3]),ds_grid_height(instanceGrid[4]),ds_grid_height(instanceGrid[5]))
    var saveLayer=0
    for (saveLayer=0; saveLayer&lt;=maxLayer; saveLayer+=1)
        {
        var saveSectorY=0
        for (saveSectorY=0; saveSectorY&lt;=maxSectorY; saveSectorY+=1)
            {
            var saveSectorX=0
            for (saveSectorX=0; saveSectorX&lt;=maxSectorX; saveSectorX+=1)
                {
                //walls
                /*var saveWallGrid=ds_grid_create(ds_grid_width(wallGrid[saveLayer]),0)
                var saveGridValue=0
                for (saveGridValue=0; saveGridValue&lt;ds_grid_height(wallGrid[saveLayer]); saveGridValue+=1)
                    {
                    if ((ds_grid_get(wallGrid[saveLayer],0,saveGridValue)&gt;saveSectorX*sectorWidth-250 and ds_grid_get(wallGrid[saveLayer],0,saveGridValue)&lt;(saveSectorX+1)*sectorWidth+250) and (ds_grid_get(wallGrid[saveLayer],1,saveGridValue)&gt;saveSectorY*sectorHeight-250 and ds_grid_get(wallGrid[saveLayer],1,saveGridValue)&lt;(saveSectorY+1)*sectorHeight+250)) or ((ds_grid_get(wallGrid[saveLayer],2,saveGridValue)&gt;=saveSectorX*sectorWidth-250 and ds_grid_get(wallGrid[saveLayer],2,saveGridValue)&lt;=(saveSectorX+1)*sectorWidth+250) and (ds_grid_get(wallGrid[saveLayer],3,saveGridValue)&gt;=saveSectorY*sectorHeight-250 and ds_grid_get(wallGrid[saveLayer],3,saveGridValue)&lt;=(saveSectorY+1)*sectorHeight+250))
                        {
                        ds_grid_resize(saveWallGrid,ds_grid_width(saveWallGrid),ds_grid_height(saveWallGrid)+1)
                        var copyGridX=0
                        for (copyGridX=0; copyGridX&lt;ds_grid_width(wallGrid[saveLayer]); copyGridX+=1)
                            ds_grid_set(saveWallGrid,copyGridX,ds_grid_height(saveWallGrid)-1,ds_grid_get(wallGrid[saveLayer],copyGridX,saveGridValue))
                        ds_grid_set(saveWallGrid,ds_grid_width(saveWallGrid)-1,ds_grid_height(saveWallGrid)-1,saveGridValue+saveLayer*maxWallGridHeight)
                        }
                    }
                ds_grid_add_region(saveWallGrid,1,0,1,ds_grid_height(saveWallGrid)-1,saveLayer*maxSectorY*sectorHeight)
                ds_grid_add_region(saveWallGrid,3,0,3,ds_grid_height(saveWallGrid)-1,saveLayer*maxSectorY*sectorHeight)
                ini_write_string(string(saveSectorX)+string(saveSectorY)+string(saveLayer),"wall",ds_grid_write(saveWallGrid))
                ds_grid_destroy(saveWallGrid)
                
                //details
                var saveDetailGrid=ds_grid_create(ds_grid_width(detailGrid[saveLayer]),0)
                var saveGridValue=0
                for (saveGridValue=0; saveGridValue&lt;ds_grid_height(detailGrid[saveLayer]); saveGridValue+=1)
                    {
                    if ((ds_grid_get(detailGrid[saveLayer],0,saveGridValue)&gt;saveSectorX*sectorWidth and ds_grid_get(detailGrid[saveLayer],0,saveGridValue)&lt;(saveSectorX+1)*sectorWidth) and (ds_grid_get(detailGrid[saveLayer],1,saveGridValue)&gt;saveSectorY*sectorHeight and ds_grid_get(detailGrid[saveLayer],1,saveGridValue)&lt;(saveSectorY+1)*sectorHeight)) or ((ds_grid_get(detailGrid[saveLayer],2,saveGridValue)&gt;=saveSectorX*sectorWidth and ds_grid_get(detailGrid[saveLayer],2,saveGridValue)&lt;=(saveSectorX+1)*sectorWidth) and (ds_grid_get(detailGrid[saveLayer],3,saveGridValue)&gt;=saveSectorY*sectorHeight and ds_grid_get(detailGrid[saveLayer],3,saveGridValue)&lt;=(saveSectorY+1)*sectorHeight))
                        {
                        ds_grid_resize(saveDetailGrid,ds_grid_width(saveDetailGrid),ds_grid_height(saveDetailGrid)+1)
                        var copyGridX=0
                        for (copyGridX=0; copyGridX&lt;ds_grid_width(detailGrid[saveLayer]); copyGridX+=1)
                            ds_grid_set(saveDetailGrid,copyGridX,ds_grid_height(saveDetailGrid)-1,ds_grid_get(detailGrid[saveLayer],copyGridX,saveGridValue))
                        }
                    }
                ds_grid_add_region(saveDetailGrid,1,0,1,ds_grid_height(saveDetailGrid)-1,saveLayer*maxSectorY*sectorHeight)
                ds_grid_add_region(saveDetailGrid,3,0,3,ds_grid_height(saveDetailGrid)-1,saveLayer*maxSectorY*sectorHeight)
                ini_write_string(string(saveSectorX)+string(saveSectorY)+string(saveLayer),"detail",ds_grid_write(saveDetailGrid))
                ds_grid_destroy(saveDetailGrid)
                
                //textures
                var saveTextureGrid=ds_grid_create(3,0)
                var saveTextureValue=0
                for(saveTextureValue=0; saveTextureValue&lt;ds_grid_height(textureGrid[saveLayer]); saveTextureValue+=1)
                    {
                    var saveTextureRow=false
                    var testTexturePoint=1
                    for (testTexturePoint=1; testTexturePoint&lt;ds_grid_width(textureGrid[saveLayer]); testTexturePoint+=2)
                        {
                        if (ds_grid_get(textureGrid[saveLayer],testTexturePoint,saveTextureValue)&gt;saveSectorX*sectorWidth and ds_grid_get(textureGrid[saveLayer],testTexturePoint,saveTextureValue)&lt;(saveSectorX+1)*sectorWidth) and (ds_grid_get(textureGrid[saveLayer],testTexturePoint+1,saveTextureValue)&gt;saveSectorY*sectorHeight and ds_grid_get(textureGrid[saveLayer],testTexturePoint+1,saveTextureValue)&lt;(saveSectorY+1)*sectorHeight)
                            {
                            saveTextureRow=true
                            break
                            }
                        }
                    if saveTextureRow=true
                        {
                        ds_grid_resize(saveTextureGrid,ds_grid_width(saveTextureGrid),ds_grid_height(saveTextureGrid)+1)
                        ds_grid_set(saveTextureGrid,0,ds_grid_height(saveTextureGrid)-1,ds_grid_get(textureGrid[saveLayer],0,saveTextureValue))
                        var saveTexturePointValue=1
                        for (saveTexturePointValue=1; saveTexturePointValue&lt;ds_grid_width(textureGrid[saveLayer]); saveTexturePointValue+=2)
                            {
                            var texturePointX=ds_grid_get(textureGrid[saveLayer],saveTexturePointValue,saveTextureValue)
                            var texturePointY=ds_grid_get(textureGrid[saveLayer],saveTexturePointValue+1,saveTextureValue)
                            if texturePointX!=-1 and texturePointY!=-1
                                {
                                if saveTexturePointValue&gt;=ds_grid_width(saveTextureGrid)
                                    ds_grid_resize(saveTextureGrid,ds_grid_width(saveTextureGrid)+2,ds_grid_height(saveTextureGrid))
                                ds_grid_set(saveTextureGrid,saveTexturePointValue,ds_grid_height(saveTextureGrid)-1,texturePointX)
                                ds_grid_set(saveTextureGrid,saveTexturePointValue+1,ds_grid_height(saveTextureGrid)-1,texturePointY+saveLayer*maxSectorY*sectorHeight)
                                }
                            }
                        }
                    }
                ini_write_string(string(saveSectorX)+string(saveSectorY)+string(saveLayer),"texture",ds_grid_write(saveTextureGrid))
                ds_grid_destroy(saveTextureGrid)
                
                //instances
                var saveInstanceGrid=ds_grid_create(ds_grid_width(instanceGrid[saveLayer]),0)
                var saveGridValue=0
                for (saveGridValue=0; saveGridValue&lt;ds_grid_height(instanceGrid[saveLayer]); saveGridValue+=1)
                    {
                    var objectValue=ds_grid_value_y(objectGrid,0,0,ds_grid_width(objectGrid),ds_grid_height(objectGrid),ds_grid_get(instanceGrid[saveLayer],0,saveGridValue))
                    var influence=ds_grid_get(objectGrid,4,objectValue)
                    if rectangle_in_rectangle(ds_grid_get(instanceGrid[saveLayer],1,saveGridValue)-influence,ds_grid_get(instanceGrid[saveLayer],2,saveGridValue)-influence,ds_grid_get(instanceGrid[saveLayer],1,saveGridValue)+influence,ds_grid_get(instanceGrid[saveLayer],2,saveGridValue)+influence,saveSectorX*sectorWidth,saveSectorY*sectorHeight,(saveSectorX+1)*sectorWidth,(saveSectorY+1)*sectorHeight)
                        {
                        ds_grid_resize(saveInstanceGrid,ds_grid_width(saveInstanceGrid),ds_grid_height(saveInstanceGrid)+1)
                        var copyGridX=0
                        for (copyGridX=0; copyGridX&lt;ds_grid_width(instanceGrid[saveLayer]); copyGridX+=1)
                            ds_grid_set(saveInstanceGrid,copyGridX,ds_grid_height(saveInstanceGrid)-1,ds_grid_get(instanceGrid[saveLayer],copyGridX,saveGridValue))
                        ds_grid_set(saveInstanceGrid,ds_grid_width(saveInstanceGrid)-2,ds_grid_height(saveInstanceGrid)-1,influence)
                        ds_grid_set(saveInstanceGrid,ds_grid_width(saveInstanceGrid)-1,ds_grid_height(saveInstanceGrid)-1,saveGridValue+saveLayer*maxInstanceGridHeight)
                        }
                    }
                ds_grid_add_region(saveInstanceGrid,2,0,2,ds_grid_height(saveInstanceGrid)-1,saveLayer*maxSectorY*sectorHeight)
                ini_write_string(string(saveSectorX)+string(saveSectorY)+string(saveLayer),"instance",ds_grid_write(saveInstanceGrid))
                ds_grid_destroy(saveInstanceGrid)
                }
            }
        }
    ini_close()
    }*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///overlay

//origin
draw_set_color(c_dkgray)
draw_circle(16,16,4,false)

//wall origins
if mode[modeNumber]="line" or mode[modeNumber]="select"
    {
    draw_set_color(c_blue)
    var drawWallOriginValue=0
    for (drawWallOriginValue=0; drawWallOriginValue&lt;ds_grid_height(wallGrid[layer]); drawWallOriginValue+=1)
        draw_circle(ds_grid_get(wallGrid[layer],0,drawWallOriginValue),ds_grid_get(wallGrid[layer],1,drawWallOriginValue),3,false)
    }

//texture origins
if mode[modeNumber]="texture" or mode[modeNumber]="select"
    {
    draw_set_color(c_red)
    var drawOriginValue=0
    while drawOriginValue&lt;ds_grid_height(textureGrid[layer])
        {
        draw_circle(ds_grid_get(textureGrid[layer],1,drawOriginValue),ds_grid_get(textureGrid[layer],2,drawOriginValue),3,false)
        drawOriginValue+=1
        }
    }

//line
if mode[modeNumber]="line"
    {
    draw_set_color(c_blue)
    if lineCursorX!=-1
        draw_circle(lineCursorX,lineCursorY,4,false)
    }
//texture
else if mode[modeNumber]="texture"
    {
    draw_set_color(c_red)
    if texturePointNumber!=1
        draw_circle(ds_grid_get(textureGrid[layer],1,ds_grid_height(textureGrid[layer])-1),ds_grid_get(textureGrid[layer],2,ds_grid_height(textureGrid[layer])-1),4,false)
    if texturePointNumber=5
        draw_line(ds_grid_get(textureGrid[layer],1,ds_grid_height(textureGrid[layer])-1),ds_grid_get(textureGrid[layer],2,ds_grid_height(textureGrid[layer])-1),ds_grid_get(textureGrid[layer],3,ds_grid_height(textureGrid[layer])-1),ds_grid_get(textureGrid[layer],4,ds_grid_height(textureGrid[layer])-1))
    }
//object
else if mode[modeNumber]="object"
    draw_set_color(c_fuchsia)
//select
else if mode[modeNumber]="select"
    {
    draw_set_color(c_lime)
    if selectPoints[0,0]!=-1 and selectPoints[0,1]!=-1
        {
        draw_set_alpha(0.5)
        draw_rectangle(selectPoints[0,0],selectPoints[1,0],selectPoints[0,1],selectPoints[1,1],false)
        draw_set_alpha(1)
        }
    }
//path
else if mode[modeNumber]="data"
    draw_set_color(c_yellow)

//cursor
draw_circle(roundX,roundY,4,true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw GUI

//line
if mode[modeNumber]="line"
    draw_text(0,16,lineMode[lineModeNumber])
//texture
else if mode[modeNumber]="texture" and sprite_exists(spr_textureSheet)
    draw_sprite(spr_textureSheet,textureNumber,16,16)
//object
else if mode[modeNumber]="object"
    {
    if ds_grid_height(objectGrid)&gt;0
        {
        draw_text(0,16,ds_grid_get(objectGrid,1,objectNumber))
        draw_text(0,64,ds_grid_get(objectGrid,4,objectNumber))
        }
    draw_text(0,32,objectRotation)
    draw_text(0,48,objectCategory[objectCategoryNumber])
    }
//select
else if mode[modeNumber]="select"
    draw_text(0,16,selectMode[selectModeNumber])
//data
else if mode[modeNumber]="data"
    {
    draw_text(0,16,dataMode[dataModeNumber])
    if dataMode[dataModeNumber]="document" and !ds_map_empty(documentMap)
        draw_text(0,32,currentDocument)
    }

//general
draw_text(0,0,mode[modeNumber])
draw_text(0,1000-64,roundX)
draw_text(0,1000-48,roundY+layer*maxSectorY*sectorHeight)
draw_text(0,1000-32,layer)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG

/*//instance grid
for (i=0; i&lt;ds_grid_height(instanceGrid[layer]); i++)   
    {
    draw_text(100,100+i*12,ds_grid_get(instanceGrid[layer],0,i))
    draw_text(500,100+i*12,ds_grid_get(instanceGrid[layer],4,i))
    }*/

/*//instance ID
draw_text(250,250,instanceID)*/

/*//data map
var i=0
var key=ds_map_find_first(dataMap)
while !is_undefined(key)
    {
    draw_text(250,i*50,key)
    key=ds_map_find_next(dataMap,key)
    var map=ds_map_find_value(dataMap,key);
    var j=0
    var dataKey=ds_map_find_first(map)
    while !is_undefined(dataKey)
        {
        draw_text(350,i*50+j*10,dataKey)
        dataKey=ds_map_find_next(dataMap,dataKey)
        j+=1
        }
    i+=1;
    }*/
    
//influence
/*for (i=0; i&lt;ds_grid_height(objectGrid); i++)
    {
    draw_text(350,50+i*25,ds_grid_get(objectGrid,4,i))
    draw_text(150,50+i*25,ds_grid_get(objectGrid,1,i))
    }*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw

//textures
if ds_grid_height(textureGrid[layer])&gt;0
    {
    draw_set_color(c_white)
    texture_set_repeat(true)
    var drawValue=0
    while drawValue&lt;ds_grid_height(textureGrid[layer])
        {
        draw_primitive_begin_texture(pr_trianglefan,sprite_get_texture(spr_textureSheet,ds_grid_get(textureGrid[layer],0,drawValue)))
        var drawTexturePointValue=1
        while drawTexturePointValue&lt;ds_grid_width(textureGrid[layer])
            {
            var texturePointX=ds_grid_get(textureGrid[layer],drawTexturePointValue,drawValue)
            var texturePointY=ds_grid_get(textureGrid[layer],drawTexturePointValue+1,drawValue)
            if texturePointX!="empty" and texturePointY!="empty"
                draw_vertex_texture(texturePointX,texturePointY,texturePointX/32,texturePointY/32)
            drawTexturePointValue+=2
            }
        draw_primitive_end()
        drawValue+=1
        }
    texture_set_repeat(false)
    }

//lines
//details
if ds_grid_height(detailGrid[layer])&gt;0
    {
    draw_set_color(c_dkgray)
    for (var drawValue=0; drawValue&lt;ds_grid_height(detailGrid[layer]); drawValue+=1)
        {
        var X1=ds_grid_get(detailGrid[layer],0,drawValue);
        var Y1=ds_grid_get(detailGrid[layer],1,drawValue);
        var X2=ds_grid_get(detailGrid[layer],2,drawValue);
        var Y2=ds_grid_get(detailGrid[layer],3,drawValue);
        
        if point_in_rectangle(X1,Y1,view_xview[0],view_yview[0],view_xview[0]+view_wview[0],view_yview[0]+view_hview[0]) or point_in_rectangle(X2,Y2,view_xview[0],view_yview[0],view_xview[0]+view_wview[0],view_yview[0]+view_hview[0])
            draw_line_width(X1,Y1,X2,Y2,2)
        }
    }

//walls
if ds_grid_height(wallGrid[layer])&gt;0
    {
    draw_set_color(c_white)
    for (var drawValue=0; drawValue&lt;ds_grid_height(wallGrid[layer]); drawValue+=1)
        {
        var X1=ds_grid_get(wallGrid[layer],0,drawValue);
        var Y1=ds_grid_get(wallGrid[layer],1,drawValue);
        var X2=ds_grid_get(wallGrid[layer],2,drawValue);
        var Y2=ds_grid_get(wallGrid[layer],3,drawValue);
        
        if point_in_rectangle(X1,Y1,view_xview[0],view_yview[0],view_xview[0]+view_wview[0],view_yview[0]+view_hview[0]) or point_in_rectangle(X2,Y2,view_xview[0],view_yview[0],view_xview[0]+view_wview[0],view_yview[0]+view_hview[0])
            draw_line_width(X1,Y1,X2,Y2,2)
        }
    }

//objects
if ds_grid_height(instanceGrid[layer])&gt;0
    {
    var drawValue=0
    while drawValue&lt;ds_grid_height(instanceGrid[layer])
        {
        var objectValue=ds_grid_value_y(objectGrid,1,0,1,ds_grid_height(objectGrid)-1,ds_grid_get(instanceGrid[layer],0,drawValue));
        if objectValue&gt;=0
            {
            var instanceX=ds_grid_get(instanceGrid[layer],1,drawValue);
            var instanceY=ds_grid_get(instanceGrid[layer],2,drawValue);
            if point_in_rectangle(instanceX,instanceY,view_xview[0],view_yview[0],view_xview[0]+view_wview[0],view_yview[0]+view_hview[0])
                {
                draw_sprite_ext(ds_grid_get(objectGrid,0,objectValue),0,instanceX,instanceY,1,1,ds_grid_get(instanceGrid[layer],3,drawValue),c_white,1)
                if displayName=true
                    draw_text(instanceX,instanceY,ds_grid_get(instanceGrid[layer],0,drawValue))
                }
            }
        drawValue+=1
        }
    }
    
//data
if mode[modeNumber]="data"
    {
    draw_set_color(c_yellow)
    
    //path
    if dataMode[dataModeNumber]="path"
        {
        for (var i=0; i&lt;ds_grid_height(pathGrid); i+=1)
            {
            var pathInstanceID=ds_grid_get(pathGrid,0,i)
            var instanceRow=scr_findRow(instanceGrid[layer],4,pathInstanceID)
            if instanceRow&gt;=0
                {
                var instanceX=ds_grid_get(instanceGrid[layer],1,instanceRow)
                var instanceY=ds_grid_get(instanceGrid[layer],2,instanceRow)
                for (var j=1; j&lt;ds_grid_width(pathGrid); j+=2)
                    {
                    if ds_grid_get(pathGrid,j,i)="empty"
                        break;
                    //draw path segments
                    else
                        {
                        if j=1
                            {
                            var X1=0
                            var Y1=0
                            }
                        else
                            {
                            var X1=X2
                            var Y1=Y2
                            }
                        var X2=ds_grid_get(pathGrid,j,i)
                        var Y2=ds_grid_get(pathGrid,j+1,i)
                        scr_drawArrow(X1+instanceX,Y1+instanceY,X2+instanceX,Y2+instanceY,2)
                        }
                    }
                //draw loop back
                if j&gt;1
                    scr_drawArrow(X2+instanceX,Y2+instanceY,instanceX,instanceY,2)
                //draw current segment
                if i=pathNumber
                    {
                    if j=1
                        {
                        var X1=0
                        var Y1=0
                        }
                    else
                        {
                        var X1=X2
                        var Y1=Y2
                        }
                    scr_drawArrow(X1+instanceX,Y1+instanceY,roundX,roundY,1)
                    }
                }
            }
        }
    //document + other
    else if dataMode[dataModeNumber]="document" or dataMode[dataModeNumber]="other"
        {
        for (var i=0; i&lt;ds_grid_height(instanceGrid[layer]); i+=1)
            {
            var instanceX=ds_grid_get(instanceGrid[layer],1,i)
            var instanceY=ds_grid_get(instanceGrid[layer],2,i)
            var dataInstanceMap=ds_map_find_value(dataMap,ds_grid_get(instanceGrid[layer],4,i))
            if !is_undefined(dataInstanceMap) and ds_exists(dataInstanceMap,ds_type_map)
                {
                if ds_map_exists(dataInstanceMap,"document") or dataMode[dataModeNumber]="other"
                    draw_circle(instanceX,instanceY,4,false)
                if roundX=instanceX and roundY=instanceY
                    {
                    var offsetY=8
                    //document
                    if dataMode[dataModeNumber]="document"
                        {
                        var title=ds_map_find_value(dataInstanceMap,"document")
                        if !is_undefined(title)
                            {
                            draw_text(instanceX+8,instanceY+offsetY,title+":")
                            draw_text(instanceX+8,instanceY+offsetY+string_height(title)+4,string_copy(ds_map_find_value(documentMap,title),1,250))
                            }
                        }
                    //other
                    else if dataMode[dataModeNumber]="other"
                        {
                        var key=ds_map_find_first(dataInstanceMap)
                        while !is_undefined(key)
                            {
                            var value=string_copy(string(ds_map_find_value(dataInstanceMap,key)),1,50)
                            draw_text(instanceX+8,instanceY+offsetY,key+": "+value)
                            key=ds_map_find_next(dataInstanceMap,key)
                            offsetY+=string_height(value)+4
                            }
                        }
                    }
                }
            }
        }
    }

    
//sectors
draw_set_alpha(0.5)
draw_set_color(c_orange)
for (var i=0; i&lt;room_width; i+=sectorWidth)
    draw_line(i,0,i,room_height)
for (var i=0; i&lt;room_height; i+=sectorHeight)
    draw_line(0,i,room_width,i)
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
