<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables

//constants
maxCharacters=1024
borderSize=16
cursorHeight=16
cursorOffset=4
moveCursorDelayStart=8

//variables
defaultText=""
text=""
keyboard_string=""
afterCursor=""
cursorTimer=0
cursor=""
textboxID=-1
moveCursorDelay=moveCursorDelayStart
obj_control.textReceived=false
keyboardStringPrevious=keyboard_string
savedWView=view_wview[0]
savedHView=view_hview[0]

//setup
view_wview[0]=1000
view_hview[0]=1000
instance_deactivate_all(true)
draw_set_halign(fa_center)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset global settings

draw_set_halign(fa_left)
instance_activate_all()
view_wview[0]=savedWView
view_hview[0]=savedHView
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move cursor delay</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input text

//type
if string_length(text)&gt;=maxCharacters and !keyboard_check(vk_backspace)
    keyboard_string=keyboardStringPrevious
keyboardStringPrevious=keyboard_string

//cursor delay
if !keyboard_check(vk_up) and !keyboard_check(vk_down) and !keyboard_check(vk_left) and !keyboard_check(vk_right)
    moveCursorDelay=moveCursorDelayStart
else if alarm_get(0)&lt;=0
    moveCursorDelay=1

//move cursor
if alarm_get(0)&lt;=0
    {
    if keyboard_check(vk_left)
        {
        afterCursor=string_copy(keyboard_string,string_length(keyboard_string),1)+afterCursor
        keyboard_string=string_copy(keyboard_string,1,string_length(keyboard_string)-1)
        alarm_set(0,moveCursorDelay)
        }
    else if keyboard_check(vk_right)
        {
        keyboard_string=keyboard_string+string_copy(afterCursor,0,1)
        afterCursor=string_copy(afterCursor,2,string_length(afterCursor)-1)
        alarm_set(0,moveCursorDelay)
        }
    //change cursor line
    else if keyboard_check(vk_up)
        {
        var newCursorPos=scr_stringPosExt(keyboard_string,"#",string_length(keyboard_string),true)-1
        if newCursorPos&gt;=0
            {
            afterCursor=string_copy(keyboard_string,newCursorPos+1,string_length(keyboard_string))+afterCursor
            keyboard_string=string_copy(keyboard_string,1,newCursorPos)
            }
        alarm_set(0,moveCursorDelay)
        }
    else if keyboard_check(vk_down)
        {
        var newCursorPos=scr_stringPosExt(afterCursor,"#",1,false)
        if newCursorPos&gt;=0
            {
            keyboard_string=keyboard_string+string_copy(afterCursor,1,newCursorPos)
            afterCursor=string_copy(afterCursor,newCursorPos+1,string_length(afterCursor))
            }
        alarm_set(0,moveCursorDelay)
        }
    }
    
//new line
if keyboard_check_pressed(vk_enter)
    keyboard_string+="#"

//copy and paste
if keyboard_check(vk_control)
    {
    if keyboard_check_pressed(ord("C"))
        clipboard_set_text(text)
    else if keyboard_check_pressed(ord("V"))
        keyboard_string+=clipboard_get_text()
    }

//submit text
if keyboard_check_pressed(vk_f1)
    {
    instance_destroy()
    obj_control.textReturn=text
    obj_control.textReturned=textboxID
    }
//cancel text
else if keyboard_check_pressed(vk_escape)
    {
    instance_destroy()
    obj_control.textReturn=defaultText
    obj_control.textReturned=textboxID
    }
    
//cusor
if cursorTimer&gt;=room_speed/2
    {
    if cursor="|"
        cursor="."
    else
        cursor="|"
    cursorTimer=0
    }
cursorTimer+=1
    
//set text
text=keyboard_string+afterCursor
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw text

//textbox
draw_set_color(c_gray)
draw_rectangle(borderSize,borderSize,display_get_gui_width()-borderSize*2,display_get_gui_height()-borderSize*2,false)

//outlint
draw_set_color(c_black)
draw_rectangle(borderSize,borderSize,display_get_gui_width()-borderSize*2,display_get_gui_height()-borderSize*2,true)

//text
draw_set_color(c_white)
draw_text_ext(display_get_gui_width()/2,borderSize,keyboard_string+cursor+afterCursor,-1,display_get_gui_width()-borderSize*2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
