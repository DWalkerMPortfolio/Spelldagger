<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player1Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables
targetSpeed=0
directionPrevious=0
pointDistancePrevious=0
dead=false
deadPrevious=false
canMove=true
falling=0
fallAlpha=0
deathAlpha=0
warped=0
warpReturnX=0
warpReturnY=0

//constants
walkSpeed=4.5
walkTime=0
accelerationTime=5
wallSlow=0.7
controller=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///falling + movement + collision+ sprites

if canMove=true and obj_control.menuDisplay[playerNumber]=false
    {
    //movement + sprites
    if obj_control.horizontalControlDeadzoneLeft[playerNumber]!=0 or obj_control.verticalControlDeadzoneLeft[playerNumber]!=0
        direction=point_direction(x,y,x+obj_control.horizontalControlLeft[playerNumber],y+obj_control.verticalControlLeft[playerNumber])
    
    if direction-directionPrevious&gt;30
        walkTime/=2
    
    if walkSpeed*point_distance(x,y,x+obj_control.horizontalControlLeft[playerNumber],y+obj_control.verticalControlLeft[playerNumber])&gt;targetSpeed or controller=-1
        targetSpeed=walkSpeed*point_distance(x,y,x+obj_control.horizontalControlDeadzoneLeft[playerNumber],y+obj_control.verticalControlDeadzoneLeft[playerNumber])
    
    speed=targetSpeed*(walkTime/accelerationTime)
    
    if speed=0
        targetSpeed=0
        
    if obj_control.horizontalControlDeadzoneLeft[playerNumber]!=0 or obj_control.verticalControlDeadzoneLeft[playerNumber]!=0
        {
        sprite_index=movementSprite
        walkTime+=1
        if speed&gt;walkSpeed/2
            image_speed=0.2
        else
            image_speed=0.1
        if walkTime&gt;accelerationTime
            walkTime=accelerationTime
        }
    else
        {
        sprite_index=idleSprite
        image_speed=0.2
        walkTime-=2
        if walkTime&lt;0
            walkTime=0
        }
    
    if point_distance(x,y,x+obj_control.horizontalControlLeft[playerNumber],y+obj_control.verticalControlLeft[playerNumber])&gt;=pointDistancePrevious-0.1 and walkTime&gt;2 and (obj_control.horizontalControlLeft[playerNumber]!=0 or obj_control.verticalControlLeft[playerNumber]!=0)
        image_angle=direction-90
        
    directionPrevious=direction
    pointDistancePrevious=point_distance(x,y,x+obj_control.horizontalControlLeft[playerNumber],y+obj_control.verticalControlLeft[playerNumber])
    
    //collision
    if !place_free(x+cos(degtorad(direction))*speed,y-sin(degtorad(direction))*speed)
        {
        var directionIncrement=5
        while true
            {
            if place_free(x+cos(degtorad(direction-directionIncrement))*speed,y-sin(degtorad(direction-directionIncrement))*speed)
                {
                direction-=directionIncrement
                speed*=wallSlow
                break
                }
            if place_free(x+cos(degtorad(direction+directionIncrement))*speed,y-sin(degtorad(direction+directionIncrement))*speed)
                {
                direction+=directionIncrement
                speed*=wallSlow
                break
                }
            if directionIncrement&gt;75
                {
                speed=0
                break
                }
            directionIncrement+=5
            }
        }
        
    //falling start
    if falling=0 and warped=0 and !scr_floor(x,y,playerNumber)
        {
        canMove=false
        falling=1
        }
    }
else
    {
    speed=0
    sprite_index=idleSprite
    walkTime=0
    }
    
//falling
if falling=1
    {
    image_xscale-=0.1
    image_yscale-=0.1
    obj_control.fade[playerNumber]=true
    if image_xscale=0
        {
        image_xscale=1
        image_yscale=1
        y-=obj_control.maxSectorY*obj_control.sectorHeight
        x+=lengthdir_x(32,image_angle+90)
        y+=lengthdir_y(32,image_angle+90)
        falling=2
        }
    }
else if falling=2 and place_free(x,y)
    {
    falling=0
    canMove=true
    }
    
if falling!=1
    fallAlpha-=0.1

//exit objext
if !place_free(x,y)
    {
    if falling!=0
        move_outside_solid(direction,64)
    if warped&gt;0
        {
        x=warpReturnX
        y=warpReturnY
        warped=2
        }
    }

fallAlpha=clamp(fallAlpha,0,1)

if warped&gt;0
    warped-=1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEST death DEACTIVATED
/*
if dead=true
    {
    canMove=false
    if deadPrevious=false
        image_index=0
    image_speed=0.13
    sprite_index=deathSprite
    if image_index&gt;=image_number/2
        obj_control.fade[playerNumber]=true
    if image_index&gt;=image_number-1
        image_speed=0
    if deathAlpha&gt;=1
        game_restart()
    }
deadPrevious=dead
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///grayscale

if !scr_lightCollision(x,y)
    shader_set(shd_grayscale)
draw_self()
shader_reset()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
