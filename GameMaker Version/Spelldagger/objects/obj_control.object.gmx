<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables

//level file
levelFile="manorData.ini"

//players
players=1
player[0]=obj_player1
if players=2
    {
    player[1]=obj_player2
    view_xport[0]=0
    view_wport[0]=960
    view_wview[0]=480
    view_visible[1]=true
    view_xport[1]=960
    view_wport[1]=960
    view_hport[1]=1080
    view_wview[1]=480
    view_hview[1]=540
    }

//controls
input[0]=-1
input[1]=0

//keyboard
keyboardUpLeft=ord("W")
keyboardDownLeft=ord("S")
keyboardLeftLeft=ord("A")
keyboardRightLeft=ord("D")

keyboardControlRight="mouse"

keyboardDaggerLeft=mb_left
keyboardDaggerRight=mb_right

keyboardRuneLeft="hold left"
keyboardRuneRight="hold right"

keyboardInteract=vk_space

keyboardMenu=vk_enter
keyboardMenuPageLeft=ord("Q")
keyboardMenuPageRight=ord("E")

//controller
controllerVerticalLeft=gp_axislv
controllerHorizontalLeft=gp_axislh

controllerVerticalRight=gp_axisrv
controllerHorizontalRight=gp_axisrh

controllerDaggerLeft=gp_shoulderlb
controllerDaggerRight=gp_shoulderrb

controllerRuneLeft=gp_shoulderl
controllerRuneRight=gp_shoulderr

controllerInteract=gp_face1

controllerMenu=gp_start
controllerMenuPageLeft=gp_shoulderl
controllerMenuPageRight=gp_shoulderr

//sectors
sectorWidth=960
sectorHeight=576
maxSectorX=10
maxSectorY=10
maxLayer=5
sectorX[0]=0
sectorY[0]=0
layer[0]=2
loadX[0]=0
loadY[0]=0
sectorXPrevious[0]=-1
sectorYPrevious[0]=-1
layerPrevious[0]=-1
sectorChanged[0]=false
lightChanged[0]=false
reload[0]=false
if players=2
    {
    sectorX[1]=0
    sectorY[1]=0
    layer[1]=2
    loadX[1]=0
    loadY[1]=0
    sectorXPrevious[1]=-1
    sectorYPrevious[1]=-1
    layerPrevious[1]=-1
    sectorChanged[1]=false
    lightChanged[1]=false
    reload[1]=false
    }

//surfaces
mpSurface=surface_create(sectorWidth*2,sectorHeight*2)
lightCalculateSurface=surface_create(600,600)
guardVisionSurface[0]=surface_create(402,402)
shadowSurface[0]=surface_create(view_wview[0]+2,view_hview[0]+2)
textureSurface[0]=surface_create(sectorWidth*2,sectorHeight*2)
darkTextureSurface[0]=surface_create(sectorWidth*2,sectorHeight*2)
shadowObject[0]=obj_player1
if players=2
    {
    guardVisionSurface[1]=surface_create(402,402)
    shadowSurface[1]=surface_create(view_wview[1]+2,view_hview[1]+2)
    textureSurface[1]=surface_create(sectorWidth*2,sectorHeight*2)
    darkTextureSurface[1]=surface_create(sectorWidth*2,sectorHeight*2)
    shadowObject[1]=obj_player2
    }
initialized=false

//gui size
display_set_gui_size(1920,1080)

//text config
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_font(fn_basic)

//textures
textureNumber=6
flickerDarkness=255

//menu
menuPage[1]="Documents"
menuPage[2]="Runes"
maxMenuPage=2
menuPage[0]=menuPage[maxMenuPage]
menuPage[maxMenuPage+1]=menuPage[1]

menuDisplay[0]=false
menuAlpha[0]=false
menuPageIndex[0]=1
menuDocumentSelect[0]=0
pointDirection[0]=90
if players=2
    {
    menuDisplay[1]=false
    menuAlpha[1]=false
    menuPageIndex[1]=1
    menuDocumentSelect[1]=0
    pointDirection[1]=90
    }
    
//message
message[0]=""
displayMessage[0]=false
messageAlpha[0]=0
if players=2
    {
    message[1]=""
    displayMessage[1]=false
    messageAlpha[1]=0
    }
    
//fade
fade[0]=false
fadeAlpha[0]=0
if players=2
    {
    fade[1]=false
    fadeAlpha[1]=0
    }
    
//TEST death
deathFade=false
deathAlpha=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///level data initialization

ini_open(levelFile)

//level grids
for (var initializeLayer=0; initializeLayer&lt;=5; initializeLayer+=1)
    {
    for (var initializeSectorY=0; initializeSectorY&lt;=maxSectorX; initializeSectorY+=1)
        {
        for (var initializeSectorX=0; initializeSectorX&lt;=maxSectorY; initializeSectorX+=1)
            {
            storedWallGrid[initializeSectorX,initializeSectorY+initializeLayer*maxSectorY]=ds_grid_create(0,0)
            ds_grid_read(storedWallGrid[initializeSectorX,initializeSectorY+initializeLayer*maxSectorY],ini_read_string(string(initializeSectorX)+","+string(initializeSectorY)+","+string(initializeLayer),"wall",""))
            storedDetailGrid[initializeSectorX,initializeSectorY+initializeLayer*maxSectorY]=ds_grid_create(0,0)
            ds_grid_read(storedDetailGrid[initializeSectorX,initializeSectorY+initializeLayer*maxSectorY],ini_read_string(string(initializeSectorX)+","+string(initializeSectorY)+","+string(initializeLayer),"detail",""))
            storedTextureGrid[initializeSectorX,initializeSectorY+initializeLayer*maxSectorY]=ds_grid_create(0,0)
            ds_grid_read(storedTextureGrid[initializeSectorX,initializeSectorY+initializeLayer*maxSectorY],ini_read_string(string(initializeSectorX)+","+string(initializeSectorY)+","+string(initializeLayer),"texture",""))
            storedInstanceGrid[initializeSectorX,initializeSectorY+initializeLayer*maxSectorY]=ds_grid_create(0,0)
            ds_grid_read(storedInstanceGrid[initializeSectorX,initializeSectorY+initializeLayer*maxSectorY],ini_read_string(string(initializeSectorX)+","+string(initializeSectorY)+","+string(initializeLayer),"instance",""))
            }
        }
    }

//path
pathGrid=ds_grid_create(0,0)
ds_grid_read(pathGrid,ini_read_string("data","path",""))

//document
documentMap=ds_map_create()
ds_map_read(documentMap,ini_read_string("data","document",""))

//data
dataMap=ds_map_create()
ds_map_read(dataMap,ini_read_string("data","other",""))
var key=ds_map_find_first(dataMap)
while !is_undefined(key)
    {
    var value=ds_map_find_value(dataMap,key)
    var newValue=ds_map_create()
    ds_map_read(newValue,value)
    ds_map_replace(dataMap,key,newValue)
    
    key=ds_map_find_next(dataMap,key)
    } 
ini_close()

//player
var initializePlayer=0
for (initializePlayer=0; initializePlayer&lt;players; initializePlayer+=1)
    {
    wallGrid[initializePlayer]=ds_grid_create(6,0)
    detailGrid[initializePlayer]=ds_grid_create(4,0)
    textureGrid[initializePlayer]=ds_grid_create(3,0)
    lowTextureGrid[initializePlayer]=ds_grid_create(3,0)
    instanceGrid[initializePlayer]=ds_grid_create(6,0)
    initializedLevelData[initializePlayer]=false
    mpGrid[initializePlayer]=mp_grid_create(-16,-16,sectorWidth*2/32+1,sectorHeight*2/32+1,32,32)
    }
    
//wall
wallVisibleList=ds_list_create()  

//texture
spr_textureSheet=sprite_add("textureSheet.png",textureNumber,false,false,0,0)

//instance
instanceCreateList=ds_list_create()
doorGrid=ds_grid_create(4,0)

//other
lightCalculationIndex=0
lightCalculationNumber=0
textureDrawX=sectorX
textureDrawY=sectorY

//old level data initialization (for reference if something breaks)
/*
ini_open("levelData.ini")
draw_set_color(c_white)

//wall grid and sprite
var dsGrid=ds_grid_create(0,0)
ds_grid_read(dsGrid,ini_read_string("data","wall",""))

var wallSpriteCreateSurface=surface_create(room_width,room_height)
surface_set_target(wallSpriteCreateSurface)
var wallSpriteDrawValue=0;
while wallSpriteDrawValue&lt;ds_grid_height(dsGrid)
    {
    wallGrid[wallSpriteDrawValue,0]=ds_grid_get(dsGrid,0,wallSpriteDrawValue)
    wallGrid[wallSpriteDrawValue,1]=ds_grid_get(dsGrid,1,wallSpriteDrawValue)
    wallGrid[wallSpriteDrawValue,2]=ds_grid_get(dsGrid,2,wallSpriteDrawValue)
    wallGrid[wallSpriteDrawValue,3]=ds_grid_get(dsGrid,3,wallSpriteDrawValue)
    wallGrid[wallSpriteDrawValue,4]=0
    draw_line_width(wallGrid[wallSpriteDrawValue,0]-1,wallGrid[wallSpriteDrawValue,1]-1,wallGrid[wallSpriteDrawValue,2]-1,wallGrid[wallSpriteDrawValue,3]-1,4)
    draw_circle(wallGrid[wallSpriteDrawValue,0]-1,wallGrid[wallSpriteDrawValue,1]-1,2,false)
    draw_circle(wallGrid[wallSpriteDrawValue,2]-1,wallGrid[wallSpriteDrawValue,3]-1,2,false)
    wallSpriteDrawValue+=1
    }
surface_reset_target()
spr_wallSprite=sprite_create_from_surface(wallSpriteCreateSurface,0,0,room_width,room_height,false,false,0,0)
obj_wall.sprite_index=spr_wallSprite
sprite_collision_mask(spr_wallSprite,false,1,0,0,room_width,room_height,0,0)
surface_free(wallSpriteCreateSurface)
ds_grid_destroy(dsGrid)

//objects
var objectCreateGrid=ds_grid_create(0,0)
ds_grid_read(objectCreateGrid,ini_read_string("data","instance",""))
var objectCreateValue=0
while objectCreateValue&lt;ds_grid_height(objectCreateGrid)
    {
    objectAngle=ds_grid_get(objectCreateGrid,3,objectCreateValue);
    instance_create(ds_grid_get(objectCreateGrid,1,objectCreateValue),ds_grid_get(objectCreateGrid,2,objectCreateValue),asset_get_index(ds_grid_get(objectCreateGrid,0,objectCreateValue)))
    objectCreateValue+=1
    }
objectAngle=0
ds_grid_destroy(objectCreateGrid)

//textures
textureNumber=3
spr_textureSheet=sprite_add("textureSheet.png",textureNumber,false,false,0,0)
var textureSpriteCreateGrid=ds_grid_create(0,0)
ds_grid_read(textureSpriteCreateGrid,ini_read_string("data","texture",""))
var textureSpriteCreateSurface=surface_create(room_width,room_height)
surface_set_target(textureSpriteCreateSurface)
texture_set_repeat(true)
var textureSpriteDrawValue=0
while textureSpriteDrawValue&lt;ds_grid_height(textureSpriteCreateGrid)
    {
    draw_primitive_begin_texture(pr_trianglefan,sprite_get_texture(spr_textureSheet,ds_grid_get(textureSpriteCreateGrid,0,textureSpriteDrawValue)))
    var textureSpriteDrawPointValue=3
    while textureSpriteDrawPointValue+1&lt;ds_grid_width(textureSpriteCreateGrid) and ds_grid_get(textureSpriteCreateGrid,textureSpriteDrawPointValue,textureSpriteDrawValue)!=-1
        {
        draw_vertex_texture(ds_grid_get(textureSpriteCreateGrid,textureSpriteDrawPointValue,textureSpriteDrawValue),ds_grid_get(textureSpriteCreateGrid,textureSpriteDrawPointValue+1,textureSpriteDrawValue),ds_grid_get(textureSpriteCreateGrid,textureSpriteDrawPointValue,textureSpriteDrawValue)/32,ds_grid_get(textureSpriteCreateGrid,textureSpriteDrawPointValue+1,textureSpriteDrawValue)/32)
        textureSpriteDrawPointValue+=2
        }
    textureSpriteDrawValue+=1
    draw_primitive_end()
    }
texture_set_repeat(false)
ds_grid_destroy(textureSpriteCreateGrid)

//light gradients
with(class_light)
    draw_sprite_ext(sprite_index,0,x,y,image_xscale,image_yscale,image_angle,c_white,0.025)

//details
draw_set_color(c_dkgray)
var detailSpriteCreateGrid=ds_grid_create(0,0)
ds_grid_read(detailSpriteCreateGrid,ini_read_string("data","detail",""))
var detailDrawValue=0
while detailDrawValue&lt;ds_grid_height(detailSpriteCreateGrid)
    {
    draw_line_width(ds_grid_get(detailSpriteCreateGrid,0,detailDrawValue),ds_grid_get(detailSpriteCreateGrid,1,detailDrawValue),ds_grid_get(detailSpriteCreateGrid,2,detailDrawValue),ds_grid_get(detailSpriteCreateGrid,3,detailDrawValue),4)
    draw_circle(ds_grid_get(detailSpriteCreateGrid,0,detailDrawValue),ds_grid_get(detailSpriteCreateGrid,1,detailDrawValue),2,false)
    draw_circle(ds_grid_get(detailSpriteCreateGrid,2,detailDrawValue),ds_grid_get(detailSpriteCreateGrid,3,detailDrawValue),2,false)
    detailDrawValue+=1
    }
ds_grid_destroy(detailSpriteCreateGrid)
surface_reset_target()

spr_textureSprite=sprite_create_from_surface(textureSpriteCreateSurface,0,0,room_width,room_height,false,false,0,0)
surface_free(textureSpriteCreateSurface)

//dark textures
darkTextureSpriteCreateSurface=surface_create(room_width,room_height)
surface_set_target(darkTextureSpriteCreateSurface)
shader_set(shd_grayscale)
draw_sprite(spr_textureSprite,0,0,0)
shader_reset()
draw_set_blend_mode(bm_subtract)
with(class_light)
    {
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale*0.975,image_yscale*0.975,image_angle,c_black,0.5)
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_black,0.5)
    }
draw_set_blend_mode(bm_normal)
surface_reset_target()
surface_set_target(textureSpriteCreateSurface)
draw_surface(darkTextureSpriteCreateSurface,0,0)
surface_reset_target()

spr_darkTextureSprite=sprite_create_from_surface(darkTextureSpriteCreateSurface,0,0,room_width,room_height,false,false,0,0)
surface_free(darkTextureSpriteCreateSurface)

ini_close()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///progression

//keys + documents
keysCollectedList=ds_list_create()
documentsCollectedList=ds_list_create()

//runes
rune[0]=true
rune[1]=true
rune[2]=true
rune[3]=false
rune[4]=false

//rune titles
runeTitle[0]="Farsight Rune"
runeTitle[1]="Warp Rune"
runeTitle[2]="Noise Rune"

//world state
generatorActivated[0]=true
generatorActivated[1]=true
fungus[0]=true
sealManorLordTaken=false

//OLD
//keys
key[0]=false
key[1]=false
key[2]=false
key[3]=false
key[4]=false
key[5]=false
key[6]=false
key[7]=false
key[8]=false

//seals
key[100]=false

//key titles
keyTitle[0]="Guard's Key"
keyTitle[1]="Captain's Key"
keyTitle[2]="Manor Servant's Key"
keyTitle[3]="Manor Lord's Key"
keyTitle[4]="Manor Vault Key"
keyTitle[5]="Jailer's Key"
keyTitle[6]="Sewer Key"
keyTitle[7]="Manor Gardener's Key"
keyTitle[8]="Church Key"

//seal titles
keyTitle[100]="Manor Lord's Seal"
/*
//documents
document[0]=true
document[1]=false
document[3]=false
document[4]=false
document[5]=true
document[6]=true
document[7]=false
document[8]=false
document[9]=false
document[10]=false
document[11]=true
document[12]=false
document[13]=false
document[14]=false*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///particle initialization

//fire
sys_fire=part_system_create()
part_system_depth(sys_fire,-10)

part_fire=part_type_create()
part_type_colour2(part_fire,c_orange,c_red)
part_type_alpha3(part_fire,0,0.75,0)
part_type_sprite(part_fire,spr_particleCircle,false,false,false)
part_type_size(part_fire,0.75,1.25,-0.01,0)
part_type_scale(part_fire,0.2,0.2)
part_type_direction(part_fire,0,359,0,0.01)
part_type_speed(part_fire,0.3,0.75,-0.01,0.01)
part_type_life(part_fire,15,30)

//leaves
sys_leaves=part_system_create()
part_system_depth(sys_leaves,-101)

part_leaves=part_type_create()
part_type_sprite(part_leaves,spr_particleCircle,false,false,false)
part_type_alpha3(part_leaves,0,3,0)
part_type_colour2(part_leaves,make_colour_rgb(0, 52, 43),make_colour_rgb(55, 150, 0))
part_type_scale(part_leaves,0.5,0.6)
part_type_orientation(part_leaves,0,359,0.0001,0.00001,false)
part_type_size(part_leaves,0.75,1.25,0,0)
part_type_life(part_leaves,1200,2400)

part_leavesDark=part_type_create()
part_type_sprite(part_leavesDark,spr_particleCircle,false,false,false)
part_type_alpha3(part_leavesDark,0,3,0)
part_type_colour2(part_leavesDark,c_dkgray,c_gray)
part_type_scale(part_leavesDark,0.5,0.6)
part_type_orientation(part_leavesDark,0,359,0.0001,0.00001,false)
part_type_size(part_leavesDark,0.75,1.25,0,0)
part_type_life(part_leavesDark,1200,2400)

//gust
sys_gust=part_system_create()
part_system_depth(sys_gust,-10)

part_gust=part_type_create()
part_type_colour1(part_gust,c_white)
part_type_alpha3(part_gust,0,0.75,0)
part_type_sprite(part_gust,spr_particleCircle,false,false,false)
part_type_size(part_gust,0.75,1.25,-0.01,0)
part_type_scale(part_gust,0.08,0.08)
part_type_speed(part_gust,1,4,-0.1,0)
part_type_life(part_gust,15,30)

//interactable
sys_interactable=part_system_create()
part_system_depth(sys_interactable,-10)

part_interactable=part_type_create()
part_type_colour1(part_interactable,c_white)
part_type_alpha3(part_interactable,0,0.75,0)
part_type_sprite(part_interactable,spr_particleCircle,false,false,false)
part_type_size(part_interactable,0.75,1.25,-0.01,0)
part_type_scale(part_interactable,0.08,0.08)
part_type_speed(part_interactable,0.1,0.4,-0.1,0)
part_type_life(part_interactable,30,60)
part_type_direction(part_interactable,0,359,0.1,0)

//farsight
sys_farsight=part_system_create()
part_system_automatic_draw(sys_farsight,false)

emit_farsight=part_emitter_create(sys_farsight)

part_farsight=part_type_create()
part_type_sprite(part_farsight,spr_particleTriangle,false,false,false)
part_type_alpha3(part_farsight,0,1,0)
part_type_colour2(part_farsight,c_blue,make_colour_rgb(9, 0, 148))
part_type_scale(part_farsight,0.25,0.25)
part_type_direction(part_farsight,0,359,0.01,0)
part_type_speed(part_farsight,0.5,1,0.01,0)
part_type_orientation(part_farsight,0,359,0.1,0,false)
part_type_size(part_farsight,0.75,1.25,0,0)
part_type_life(part_farsight,30,60)

//rune
sys_rune=part_system_create()
part_system_depth(sys_rune,-10)

part_rune[0]=part_type_create()
part_type_sprite(part_rune[0],spr_particleTriangle,false,false,false)
part_type_alpha3(part_rune[0],0,1,0)
part_type_colour2(part_rune[0],c_blue,make_colour_rgb(9,0,148))
part_type_scale(part_rune[0],0.1,0.1)
part_type_direction(part_rune[0],0,359,0.01,0)
part_type_speed(part_rune[0],0.01,0.05,0.01,0)
part_type_orientation(part_rune[0],0,359,0.1,0,false)
part_type_size(part_rune[0],0.75,1.25,0,0)
part_type_life(part_rune[0],15,45)

part_rune[1]=part_type_create()
part_type_sprite(part_rune[1],spr_particleTriangle,false,false,false)
part_type_alpha3(part_rune[1],0,1,0)
part_type_colour2(part_rune[1],c_white,c_ltgray)
part_type_scale(part_rune[1],0.1,0.1)
part_type_direction(part_rune[1],0,359,0.01,0)
part_type_speed(part_rune[1],0.01,0.05,0.01,0)
part_type_orientation(part_rune[1],0,359,0.1,0,false)
part_type_size(part_rune[1],0.75,1.25,0,0)
part_type_life(part_rune[1],15,45)

part_rune[2]=part_type_create()
part_type_sprite(part_rune[2],spr_particleTriangle,false,false,false)
part_type_alpha3(part_rune[2],0,1,0)
part_type_colour2(part_rune[2],c_yellow,make_colour_rgb(255,250,122))
part_type_scale(part_rune[2],0.1,0.1)
part_type_direction(part_rune[2],0,359,0.01,0)
part_type_speed(part_rune[2],0.01,0.05,0.01,0)
part_type_orientation(part_rune[2],0,359,0.1,0,false)
part_type_size(part_rune[2],0.75,1.25,0,0)
part_type_life(part_rune[2],15,45)

//resurrection
sys_resurrection=part_system_create()
part_system_depth(sys_resurrection,-10)

part_resurrection=part_type_create()
part_type_sprite(part_resurrection,spr_particleTriangle,false,false,false)
part_type_alpha3(part_resurrection,0,1,0)
part_type_colour1(part_resurrection,c_black)
part_type_scale(part_resurrection,0.125,0.125)
part_type_direction(part_resurrection,0,359,0.01,0)
part_type_speed(part_resurrection,0.1,0.5,0.01,0)
part_type_orientation(part_resurrection,0,359,0.1,0,false)
part_type_size(part_resurrection,0.75,1.25,0,0)
part_type_life(part_resurrection,50,80)

part_antiResurrection=part_type_create()
part_type_sprite(part_antiResurrection,spr_particleTriangle,false,false,false)
part_type_alpha3(part_antiResurrection,0,1,0)
part_type_colour1(part_antiResurrection,c_white)
part_type_scale(part_antiResurrection,0.125,0.125)
part_type_direction(part_antiResurrection,0,359,0.01,0)
part_type_speed(part_antiResurrection,0.1,0.5,0.01,0)
part_type_orientation(part_antiResurrection,0,359,0.1,0,false)
part_type_size(part_antiResurrection,0.75,1.25,0,0)
part_type_life(part_antiResurrection,50,80)

//electricity
sys_electricity=part_system_create()
part_system_depth(sys_electricity,-10)

part_electricity=part_type_create()
part_type_colour1(part_electricity,c_yellow)
part_type_alpha3(part_electricity,0,0.75,0)
part_type_sprite(part_electricity,spr_particleCircle,false,false,false)
part_type_size(part_electricity,0.75,1.25,-0.01,0)
part_type_scale(part_electricity,0.05,0.05)
part_type_direction(part_electricity,0,359,0,0.02)
part_type_speed(part_electricity,0.5,0.1,0,0.02)
part_type_life(part_electricity,15,20)

//window
sys_window=part_system_create()
part_system_depth(sys_window,-10)

part_window=part_type_create()
part_type_colour3(part_window,c_teal,c_teal,c_white)
part_type_alpha3(part_window,0.5,1,0)
part_type_sprite(part_window,spr_particleCircle,false,false,false)
part_type_size(part_window,1,1.5,-0.01,0)
part_type_scale(part_window,0.05,0.05)
part_type_direction(part_window,0,359,0,0.1)
part_type_speed(part_window,0.25,2.5,0,0.02)
part_type_life(part_window,20,25)

//suspicion
sys_suspicion=part_system_create()
part_system_depth(sys_suspicion,-10)

part_suspicion=part_type_create()
part_type_colour1(part_suspicion,c_orange)
part_type_alpha3(part_suspicion,0,0.75,0)
part_type_sprite(part_suspicion,spr_particleCircle,false,false,false)
part_type_size(part_suspicion,1,1.5,0,0)
part_type_scale(part_suspicion,0.125,0.125)
part_type_direction(part_suspicion,0,359,0.01,0)
part_type_speed(part_suspicion,0.1,0.5,0,0)
part_type_life(part_suspicion,30,40)

//fountain
sys_fountain=part_system_create()
part_system_depth(sys_fountain,-10)

part_fountain=part_type_create()
part_type_colour2(part_fountain,c_blue,c_white)
part_type_alpha3(part_fountain,0.75,0.75,0)
part_type_sprite(part_fountain,spr_particleCircle,false,false,false)
part_type_size(part_fountain,1,1.5,0,0)
part_type_scale(part_fountain,0.15,0.15)
part_type_direction(part_fountain,0,359,0,0.01)
part_type_speed(part_fountain,0.7,1.2,-0.02,0)
part_type_life(part_fountain,50,70)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG debug overlay DEACTIVATED
/*
show_debug_overlay(true)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///document initialization DEACTIVATED + NEED REWRITTEN
/*
//0 (travel journal)
documentTitle[0]="Travel Journal"
documentText[0]="Travel Journal, Day 14:
11/5/1768

I have arrived at the City, a crucial
step towards completing my mission to
stop the Dread King's military ambitions. 
However, the gates appear to be well
guarded. I have heard rumors that there
is a way past the inner gates through
the battlements accessed from the
Telescope Tower, a place frequently
used to spy on foreign adversaries."

//1 (cook's note)
documentTitle[1]="Cook's Note"
documentText[1]="Note to Self:

The jailer prefers to take his meals
at his home at 4 East St.

 - Cook"

//2 (camptain's note)
documentTitle[2]="Travel Request"
documentText[2]="Request of Travel from City:


Name: Theo Watson

Occupation: Military Advisor to the Dead King

Reason for Travel: Gathering of Intelligence

Duration of Travel: One month

Date of Departure: 11/2/1768

Address: 12 NORTH LANE


Status: Approved"

//3 (gardener's journal)
documentTitle[3]="Gardener's Note"
documentText[3]="Garden Journal: Day 879

I still cannot figure it out. 
Where does the water come from?
None of the pipes under the fountain
lead to any source of water."

//4 (church note)
documentTitle[4]="Priest's Note"
documentText[4]="I have posted a guard
with the chuch key
in the spire near our new
enchanted church bell to
ward against theft."

//5 (advisor's note)
documentTitle[5]="Advisor's Warning"
documentText[5]="Intruders Beware!"

//6 (advisor's journal, seals)
documentTitle[6]="Advisor's Meeting Notes"
documentText[6]="Meeting Notes:
The security of the Almighty
Dead King's Soul Receptacle has
now been seen to. As the only
thing maintaining his majesty's
proserous reign, it has been
placed within a vault inside
the keep, locked by a pair of
seals givin to Lord and Lady
Corradan. As an added precuation
the seals will emit a loud noise
if ever picked up by anyone other
than myself, the Corrodans, or
the Dead King himself."

//7 (advisor's journal, manor)
documentTitle[7]="Advisor's Report: Manor"
documentText[7]="Security Report: Manor

Lord Corrodan's Manor on West St.
is equiped with state-of-the-art
technology from the
artificer on North Rd. Some
of this presents a true obstacle
to theft. It has also been ensured
that the manor's many servants,
most of whome live in the tenemants
on South Ln. have been made aware
of the increased importance of
security."

//8 (advisor's journal, shipyard)
documentTitle[8]="Advisor's Report: Docks"
documentText[8]="Security Report: Docks
INSERT DOCK INFO HERE
"

//9 (restaurant note)
documentTitle[9]="Restaurant Note"
documentText[9]="Catering Oder:

Recipient: Lord Corradan

Purpose: Solstice Masquerade

Due by: 2 Days from Now"

//10 (tenements note, ground floor)
documentTitle[10]="Top-Secret Cleaning Instructions"
documentText[10]="DO NOT REVEAL THIS
INFORMATION

Every day, after your normal
shift is complete, you are
to sweep the secret passages
connected to the front hall,
the kitchen, and my office
on the first floor. Failure
to do so will result in
immediate firing.
    - Lord Corradan"
    
//11 (tenements note, second floor)
documentTitle[11]="Servant's Journal"
documentText[11]="13/28/07

Lord Corrodan is planning
a party sometime soon. He's
already set up catering from
the restaurant on South Rd.
(less cooking for us) and at
least one noble has arrived
and is staying in the high-
quality inn near the city center.
"

//12 (artificer's journal, basement)
documentTitle[12]="Generator Tests"
documentText[12]="The new generator
prototype appears to be working
well and the self-reapiring
subsystem is all in order,
though the generator itself
remains fragile.
I am sure Lord Corrodan will
greatly appreciate this masterwork."

//13 (artificer's journal, house)
documentTitle[13]="Alarm Tests"
documentText[13]="My alarm system
has been working fantastically
having already caught the
the greatest thief this city has
seen, no doubt seeking to steal
my designs. The alarm will trigger
if any nearby door is opened and
has already been installed in
the upscale inn nearby.

PS: Must increase durability of the
alarm module itself, as it remains
prone to breaking."

//14 (inn journal)
documentTitle[14]="Visiting Lord's Diary"
documentText[14]="Dear Diary:

Today I have arrived in the desolate
Dead City for Lord Corrodan's party.
I have sought a room at the local inn
however due to the annoying fact that
none of Lord Corrodan's guest rooms
have any windows for some reason I
cannot fathom.

I am quite looking forward to the party
however as I have heard that Lord Corrodan
intends to display some magical seal he has
recently recieved in the ball room on the
second floor."
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///message alarm 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///message alarm 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///controller menu motion 2 alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///controller menu motion 1 alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///double click right alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///double click left alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sector management

var loadPlayer=0
for (loadPlayer=0; loadPlayer&lt;players; loadPlayer+=1)
    {
    //calculate new sector
    sectorChanged[loadPlayer]=false
    layerPrevious[loadPlayer]=layer[loadPlayer]
    sectorXPrevious[loadPlayer]=sectorX[loadPlayer]
    sectorYPrevious[loadPlayer]=sectorY[loadPlayer]
    
    layer[loadPlayer]=max(0,floor(view_yview[loadPlayer]/(maxSectorY*sectorHeight)))
    sectorX[loadPlayer]=max(0,floor(view_xview[loadPlayer]/sectorWidth))
    sectorY[loadPlayer]=max(0,floor(view_yview[loadPlayer]/sectorHeight-layer[loadPlayer]*maxSectorY))
    loadX[loadPlayer]=sectorX[loadPlayer]*sectorWidth
    loadY[loadPlayer]=(sectorY[loadPlayer]+layer[loadPlayer]*maxSectorY)*sectorHeight
    
    //load sector
    if sectorX[loadPlayer]!=sectorXPrevious[loadPlayer] or sectorY[loadPlayer]!=sectorYPrevious[loadPlayer] or layer[loadPlayer]!=layerPrevious[loadPlayer] or initializedLevelData[loadPlayer]=false or reload[loadPlayer]=true
        {
        sectorChanged[loadPlayer]=true
        
        //destroy wall colliders
        with(class_wallCollider)
            {
            if creator=loadPlayer
                instance_destroy()
            }
            
        //save instance creation
        with(all)
            {
            if (object_is_ancestor(object_index,class_prop) or object_is_ancestor(object_index,class_guard) or object_index=class_light) and object_index!=class_wallCollider
                {
                var destroy=true
                var testPlayer=0
                for (testPlayer=0; testPlayer&lt;obj_control.players; testPlayer+=1)
                    {
                    //OLD test (in case something breaks)
                    //rectangle_in_rectangle(x-range,y-range,x+range,y+range,obj_control.sectorX[testPlayer]*obj_control.sectorWidth,(obj_control.sectorY[testPlayer]+obj_control.layer[testPlayer]*obj_control.maxSectorY)*obj_control.sectorHeight,(obj_control.sectorX[testPlayer]+2)*obj_control.sectorWidth,(obj_control.sectorY[testPlayer]+2+obj_control.layer[testPlayer]*obj_control.maxSectorY)*obj_control.sectorHeight)=0(object_index=class_light and ) or (object_is_ancestor(object_index,class_guard) and rectangle_in_rectangle(x-influence,y-influence,x+influence,y+influence,(obj_control.sectorX[testPlayer]-1)*obj_control.sectorWidth,(obj_control.sectorY[testPlayer]-1+obj_control.layer[testPlayer]*obj_control.maxSectorY)*obj_control.sectorHeight,(obj_control.sectorX[testPlayer]+4)*obj_control.sectorWidth,(obj_control.sectorY[testPlayer]+4+obj_control.layer[testPlayer]*obj_control.maxSectorY)*obj_control.sectorHeight)=0) or (object_index!=class_light and !object_is_ancestor(object_index,class_guard) and rectangle_in_rectangle(x-influence,y-influence,x+influence,y+influence,obj_control.sectorX[testPlayer]*obj_control.sectorWidth,(obj_control.sectorY[testPlayer]+obj_control.layer[testPlayer]*obj_control.maxSectorY)*obj_control.sectorHeight,(obj_control.sectorX[testPlayer]+2)*obj_control.sectorWidth,(obj_control.sectorY[testPlayer]+2+obj_control.layer[testPlayer]*obj_control.maxSectorY)*obj_control.sectorHeight)=0)
                    if rectangle_in_rectangle(x-influence,y-influence,x+influence,y+influence,obj_control.sectorX[testPlayer]*obj_control.sectorWidth,(obj_control.sectorY[testPlayer]+obj_control.layer[testPlayer]*obj_control.maxSectorY)*obj_control.sectorHeight,(obj_control.sectorX[testPlayer]+2)*obj_control.sectorWidth,(obj_control.sectorY[testPlayer]+2+obj_control.layer[testPlayer]*obj_control.maxSectorY)*obj_control.sectorHeight)!=0
                        {
                        destroy=false
                        break
                        }
                    }
                if destroy=true
                    {
                    if object_index!=class_light and ds_list_find_index(obj_control.instanceCreateList,instanceIndex)!=-1
                        ds_list_delete(obj_control.instanceCreateList,ds_list_find_index(obj_control.instanceCreateList,instanceIndex))
                    instance_destroy()
                    }
                }
            }
        
        //load grids
        scr_loadGrid(wallGrid,storedWallGrid,loadPlayer)
        scr_loadGrid(detailGrid,storedDetailGrid,loadPlayer)
        scr_loadGrid(textureGrid,storedTextureGrid,loadPlayer)
        scr_loadGrid(instanceGrid,storedInstanceGrid,loadPlayer)
        scr_loadGrid(lowTextureGrid,storedTextureGrid,loadPlayer,-1)

        //load walls
        for (var i=0; i&lt;ds_grid_height(wallGrid[loadPlayer]); i+=1)
            {
            var wallX1=ds_grid_get(wallGrid[loadPlayer],0,i)
            var wallY1=ds_grid_get(wallGrid[loadPlayer],1,i)
            var wallX2=ds_grid_get(wallGrid[loadPlayer],2,i)
            var wallY2=ds_grid_get(wallGrid[loadPlayer],3,i)
            
            //create colliders
            var colliderCreated=instance_create(wallX1,wallY1,class_wallCollider);
            colliderCreated.creator=loadPlayer
            colliderCreated.wallID=ds_grid_get(wallGrid[loadPlayer],4,i)
            colliderCreated.image_angle=point_direction(wallX1,wallY1,wallX2,wallY2)
            colliderCreated.image_xscale=point_distance(wallX1,wallY1,wallX2,wallY2)+1
            }
        
        //instances
        var createInstanceValue=0
        for (createInstanceValue=0; createInstanceValue&lt;ds_grid_height(instanceGrid[loadPlayer]); createInstanceValue+=1)
            {
            //check that instance doesn't exist yet
            if ds_list_find_index(instanceCreateList,ds_grid_get(instanceGrid[loadPlayer],4,createInstanceValue))=-1
                {
                //check that instance doesn't spawn on screen
                var instanceSpawnX=ds_grid_get(instanceGrid[loadPlayer],1,createInstanceValue)
                var instanceSpawnY=ds_grid_get(instanceGrid[loadPlayer],2,createInstanceValue)
                if initializedLevelData[loadPlayer]=false or layer[loadPlayer]!=layerPrevious[loadPlayer] or (!point_in_rectangle(instanceSpawnX,instanceSpawnY,view_xview[0],view_yview[0],view_xview[0]+view_wview[0],view_yview[0]+view_hview[0]) and (players&lt;2 or !point_in_rectangle(instanceSpawnX,instanceSpawnY,view_xview[1],view_yview[1],view_xview[1]+view_wview[1],view_yview[1]+view_hview[1])))
                    {
                    var objectToCreate=asset_get_index(ds_grid_get(instanceGrid[loadPlayer],0,createInstanceValue))
                    if objectToCreate&lt;0
                        show_message("ERROR! Attempted to create instance of object that doesn't exist. Editor ID: "+string(ds_grid_get(instanceGrid[loadPlayer],4,createInstanceValue)))
                    else
                        {
                        var created=instance_create(ds_grid_get(instanceGrid[loadPlayer],1,createInstanceValue),ds_grid_get(instanceGrid[loadPlayer],2,createInstanceValue),asset_get_index(ds_grid_get(instanceGrid[loadPlayer],0,createInstanceValue)));
                        created.influence=ds_grid_get(instanceGrid[loadPlayer],5,createInstanceValue)
                        created.instanceIndex=ds_grid_get(instanceGrid[loadPlayer],4,createInstanceValue)
                        created.image_angle=ds_grid_get(instanceGrid[loadPlayer],3,createInstanceValue)
                    
                        //data
                        var createdData=ds_map_find_value(dataMap,created.instanceIndex)
                        if !is_undefined(createdData)
                            created.dataMap=ds_map_find_value(dataMap,created.instanceIndex)
                        else
                            created.dataMap=noone
                        
                        //path
                        if ds_grid_value_exists(pathGrid,0,0,0,ds_grid_height(pathGrid)-1,created.instanceIndex)
                            created.pathRow=ds_grid_value_y(pathGrid,0,0,0,ds_grid_height(pathGrid)-1,created.instanceIndex)
                        else
                            created.pathRow=-1
                            
                        ds_list_add(instanceCreateList,ds_grid_get(instanceGrid[loadPlayer],4,createInstanceValue))
                        }
                    }
                }
            }
        
        //generate mp grid
        mp_grid_destroy(mpGrid[loadPlayer])
        mpGrid[loadPlayer]=mp_grid_create(sectorX[loadPlayer]*sectorWidth-16,(sectorY[loadPlayer]+layer[loadPlayer]*maxSectorY)*sectorHeight-16,(sectorWidth*2+16)/32,(sectorHeight*2+16)/32,32,32)
        mp_grid_add_instances(mpGrid[loadPlayer],class_solid,true)
        //clear doors from mp grid
        with(class_door)
            {
            mp_grid_clear_cell(obj_control.mpGrid[loadPlayer],floor((x+16-obj_control.sectorX[loadPlayer]*obj_control.sectorWidth)/32),floor((y+16-(obj_control.sectorY[loadPlayer]+obj_control.layer[loadPlayer]*obj_control.maxSectorY)*obj_control.sectorHeight)/32))
            if type="double"
                {
                mp_grid_clear_cell(obj_control.mpGrid[loadPlayer],floor((x+lengthdir_x(32,image_angle+180)+16-obj_control.sectorX[loadPlayer]*obj_control.sectorWidth)/32),floor((y+lengthdir_y(32,image_angle+180)+16-(obj_control.sectorY[loadPlayer]+obj_control.layer[loadPlayer]*obj_control.maxSectorY)*obj_control.sectorHeight)/32))
                mp_grid_clear_cell(obj_control.mpGrid[loadPlayer],floor((x+lengthdir_x(32,image_angle)+16-obj_control.sectorX[loadPlayer]*obj_control.sectorWidth)/32),floor((y+lengthdir_y(32,image_angle)+16-(obj_control.sectorY[loadPlayer]+obj_control.layer[loadPlayer]*obj_control.maxSectorY)*obj_control.sectorHeight)/32))
                }
            }
        
        initializedLevelData[loadPlayer]=true
        reload[loadPlayer]=false
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///control management

//control management
var inputNumber=0
while inputNumber&lt;players
    {
    //controller
    if input[inputNumber]&gt;=0
        {
        gamepad_set_axis_deadzone(input[inputNumber],0)
        horizontalControlLeft[inputNumber]=gamepad_axis_value(input[inputNumber],controllerHorizontalLeft)
        verticalControlLeft[inputNumber]=gamepad_axis_value(input[inputNumber],controllerVerticalLeft)
        horizontalControlRight[inputNumber]=gamepad_axis_value(input[inputNumber],controllerHorizontalRight)
        verticalControlRight[inputNumber]=gamepad_axis_value(input[inputNumber],controllerVerticalRight)
        gamepad_set_axis_deadzone(input[inputNumber],0.4)
        horizontalControlDeadzoneLeft[inputNumber]=gamepad_axis_value(input[inputNumber],controllerHorizontalLeft)
        verticalControlDeadzoneLeft[inputNumber]=gamepad_axis_value(input[inputNumber],controllerVerticalLeft)
        horizontalControlDeadzoneRight[inputNumber]=gamepad_axis_value(input[inputNumber],controllerHorizontalRight)
        verticalControlDeadzoneRight[inputNumber]=gamepad_axis_value(input[inputNumber],controllerVerticalRight)
        
        
        daggerPressedLeft[inputNumber]=gamepad_button_check_pressed(input[inputNumber],controllerDaggerLeft)
        daggerPressedRight[inputNumber]=gamepad_button_check_pressed(input[inputNumber],controllerDaggerRight)
        
        runePressedLeft[inputNumber]=gamepad_button_check_pressed(input[inputNumber],controllerRuneLeft)
        runeLeft[inputNumber]=gamepad_button_check(input[inputNumber],controllerRuneLeft)
        runePressedRight[inputNumber]=gamepad_button_check_pressed(input[inputNumber],controllerRuneRight)
        runeRight[inputNumber]=gamepad_button_check(input[inputNumber],controllerRuneRight)
        
        interactPressed[inputNumber]=gamepad_button_check_pressed(input[inputNumber],controllerInteract)
        
        menuPressed[inputNumber]=gamepad_button_check_pressed(input[inputNumber],controllerMenu)
        menuPageLeftPressed[inputNumber]=gamepad_button_check_pressed(input[inputNumber],controllerMenuPageLeft)
        menuPageRightPressed[inputNumber]=gamepad_button_check_pressed(input[inputNumber],controllerMenuPageRight)
        
        if (horizontalControlDeadzoneLeft[inputNumber]!=0 or verticalControlDeadzoneLeft[inputNumber]!=0) and alarm_get(inputNumber+1)&lt;=0
            {
            if verticalControlDeadzoneLeft[inputNumber]&lt;0
                menuUp[inputNumber]=true
            if verticalControlDeadzoneLeft[inputNumber]&gt;0
                menuDown[inputNumber]=true
            if horizontalControlDeadzoneLeft[inputNumber]&lt;0
                menuLeft[inputNumber]=true
            if horizontalControlDeadzoneLeft[inputNumber]&gt;0
                menuRight[inputNumber]=true
            alarm_set(inputNumber+1,12)
            }
        else
            {
            menuUp[inputNumber]=false
            menuDown[inputNumber]=false
            menuLeft[inputNumber]=false
            menuRight[inputNumber]=false
            if horizontalControlDeadzoneLeft[inputNumber]=0 and verticalControlDeadzoneLeft[inputNumber]=0
                alarm_set(inputNumber+1,-1)
            }
        }
    
    //keyboard
    else if input[inputNumber]=-1
        {
        horizontalControlLeft[inputNumber]=0
        verticalControlLeft[inputNumber]=0
        if keyboard_check(keyboardLeftLeft)
            horizontalControlLeft[inputNumber]-=1
        if keyboard_check(keyboardRightLeft)
            horizontalControlLeft[inputNumber]+=1
        if keyboard_check(keyboardUpLeft)
            verticalControlLeft[inputNumber]-=1
        if keyboard_check(keyboardDownLeft)
            verticalControlLeft[inputNumber]+=1
        
        if horizontalControlLeft[inputNumber]!=0 and verticalControlLeft[inputNumber]!=0
            {
            horizontalControlLeft[inputNumber]*=0.75
            verticalControlLeft[inputNumber]*=0.75
            }
        verticalControlDeadzoneLeft[inputNumber]=verticalControlLeft[inputNumber]
        horizontalControlDeadzoneLeft[inputNumber]=horizontalControlLeft[inputNumber]
        
        if inputNumber=0
            {
            horizontalControlRight[inputNumber]=(mouse_x-obj_player1.x)
            if abs(horizontalControlRight[inputNumber])&gt;24
                horizontalControlDeadzoneRight[inputNumber]=horizontalControlRight[inputNumber]
            else
                horizontalControlDeadzoneRight[inputNumber]=0
            verticalControlRight[inputNumber]=(mouse_y-obj_player1.y)
            if abs(verticalControlRight[inputNumber])&gt;24
                verticalControlDeadzoneRight[inputNumber]=verticalControlRight[inputNumber]
            else
                verticalControlDeadzoneRight[inputNumber]=0
            }
        else if inputNumber=1
            {
            horizontalControlRight[inputNumber]=(mouse_x-obj_player2.x)
            if abs(horizontalControlRight[inputNumber])&gt;24
                horizontalControlDeadzoneRight[inputNumber]=horizontalControlRight[inputNumber]
            else
                horizontalControlDeadzoneRight[inputNumber]=0
            verticalControlRight[inputNumber]=(mouse_y-obj_player2.y)
            if abs(verticalControlRight[inputNumber])&gt;24
                verticalControlDeadzoneRight[inputNumber]=verticalControlRight[inputNumber]
            else
                verticalControlDeadzoneRight[inputNumber]=0
            }
        
        daggerPressedLeft[inputNumber]=mouse_check_button_pressed(keyboardDaggerLeft)
        daggerPressedRight[inputNumber]=mouse_check_button_pressed(keyboardDaggerRight)
        
        if mouse_check_button_pressed(keyboardDaggerLeft)
            alarm_set(0,9)
        if mouse_check_button(keyboardDaggerLeft) and alarm_get(0)&lt;=0
            {
            if alarm_get(0)=0
                runePressedLeft[inputNumber]=true
            runeLeft[inputNumber]=true
            }
        else
            {
            runePressedLeft[inputNumber]=false
            runeLeft[inputNumber]=false
            }    
            
        if mouse_check_button_pressed(keyboardDaggerRight)
            alarm_set(1,9)
        if mouse_check_button(keyboardDaggerRight) and alarm_get(1)&lt;=0
            {
            if alarm_get(1)=0
                runePressedRight[inputNumber]=true
            runeRight[inputNumber]=true
            }
        else
            {
            runePressedRight[inputNumber]=false
            runeRight[inputNumber]=false
            } 
        
        interactPressed[inputNumber]=keyboard_check_pressed(keyboardInteract)
        
        menuPressed[inputNumber]=keyboard_check_pressed(keyboardMenu)
        menuPageLeftPressed[inputNumber]=keyboard_check_pressed(keyboardMenuPageLeft)
        menuPageRightPressed[inputNumber]=keyboard_check_pressed(keyboardMenuPageRight)
        
        if keyboard_check_pressed(keyboardUpLeft)
            menuUp[inputNumber]=true
        else
            menuUp[inputNumber]=false
        if keyboard_check_pressed(keyboardDownLeft)
            menuDown[inputNumber]=true
        else
            menuDown[inputNumber]=false
        if keyboard_check_pressed(keyboardLeftLeft)
            menuLeft[inputNumber]=true
        else
            menuLeft[inputNumber]=false
        if keyboard_check_pressed(keyboardRightLeft)
            menuRight[inputNumber]=true
        else
            menuRight[inputNumber]=false
        }
        
    inputNumber+=1
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///view setting

view_xview[0]=obj_player1.x-view_wview[0]/2
view_yview[0]=obj_player1.y-view_hview[0]/2

if players=2
    {
    view_xview[1]=obj_player2.x-view_wview[1]/2
    view_yview[1]=obj_player2.y-view_hview[1]/2
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///surface regeneration REFACTOR/UPDATE

if !surface_exists(mpSurface)
    mpSurface=surface_create(sectorWidth*2,sectorHeight*2)
if !surface_exists(lightCalculateSurface)
    lightCalculateSurface=surface_create(600,600)
if !surface_exists(guardVisionSurface[0])
    guardVisionSurface[0]=surface_create(402,402)
if !surface_exists(shadowSurface[0])
    shadowSurface[0]=surface_create(view_wview[0]+2,view_hview[0]+2)
if !surface_exists(textureSurface[0])
    {
    textureSurface[0]=surface_create(sectorWidth*2,sectorHeight*2)
    reload[0]=true
    }
if !surface_exists(darkTextureSurface[0])
    {
    darkTextureSurface[0]=surface_create(sectorWidth*2,sectorHeight*2)
    reload[0]=true
    }
if players=2
    {
    if !surface_exists(guardVisionSurface[1])
        guardVisionSurface[1]=surface_create(402,402)
    if !surface_exists(shadowSurface[1])
        shadowSurface[1]=surface_create(view_wview[1]+2,view_hview[1]+2)
    if !surface_exists(textureSurface[1])
        {
        textureSurface[1]=surface_create(sectorWidth*2,sectorHeight*2)
        reload[1]=true
        }
    if !surface_exists(darkTextureSurface[1])
        {
        darkTextureSurface[1]=surface_create(sectorWidth*2,sectorHeight*2)
        reload[1]=true
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wall visibility

for (var wallPlayer=0; wallPlayer&lt;players; wallPlayer+=1)
    {
    for (var wallTestValue=0; wallTestValue&lt;ds_grid_height(wallGrid[wallPlayer]); wallTestValue+=1)
        {
        //check if already on list
        if ds_list_find_index(wallVisibleList,ds_grid_get(wallGrid[wallPlayer],4,wallTestValue))=-1
            {
            for (var testPlayer=0; testPlayer&lt;players; testPlayer+=1)
                {
                var x1=ds_grid_get(wallGrid[wallPlayer],0,wallTestValue)
                var y1=ds_grid_get(wallGrid[wallPlayer],1,wallTestValue)
                var x2=ds_grid_get(wallGrid[wallPlayer],2,wallTestValue)
                var y2=ds_grid_get(wallGrid[wallPlayer],3,wallTestValue)
                var xCenter=(x1+x2)/2
                var yCenter=(y1+y2)/2
                var testX1=xCenter+lengthdir_x(4,point_direction(x1,y1,x2,y2)+90)
                var testY1=yCenter+lengthdir_y(4,point_direction(x1,y1,x2,y2)+90)
                var testX2=xCenter+lengthdir_x(4,point_direction(x1,y1,x2,y2)-90)
                var testY2=yCenter+lengthdir_y(4,point_direction(x1,y1,x2,y2)-90)
                if point_distance(shadowObject[testPlayer].x,shadowObject[testPlayer].y,testX1,testY1)&lt;point_distance(shadowObject[testPlayer].x,shadowObject[testPlayer].y,testX2,testY2)
                    {
                    var testX=testX1
                    var testY=testY1
                    }
                else
                    {
                    var testX=testX2
                    var testY=testY2
                    }
                if collision_line(shadowObject[testPlayer].x,shadowObject[testPlayer].y,testX,testY,class_wall,true,true)=noone
                    {
                    //save to wall visible list
                    ds_list_add(wallVisibleList,ds_grid_get(wallGrid[wallPlayer],4,wallTestValue))
                    }
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEST manor in-dev mechanics DEACTIVATED

/*
if keyboard_check_pressed(ord("1"))
    {
    obj_player1.x=2400
    obj_player1.y=23680
    }
    
if keyboard_check_pressed(ord("2"))
    {
    obj_player1.x=3168
    obj_player1.y=12736
    }
    
if keyboard_check_pressed(ord("3"))
    {
    obj_player1.x=2848
    obj_player1.y=33504
    }
    
if keyboard_check_pressed(ord("K"))
    key[2]=true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///calculate textures

for (var i=0; i&lt;=obj_control.players-1; i+=1)
    {
    //calculate texture
    if sectorChanged[i]=true
        {
        texture_set_repeat(true)
        surface_set_target(textureSurface[i])
        draw_clear_alpha(c_black,0)
        
        //draw low texture
        shader_set(shd_grayscale)
        draw_set_color(c_white)
        var drawLowTextureValue=ds_grid_height(lowTextureGrid[i])-1
        for (drawLowTextureValue=ds_grid_height(lowTextureGrid[i])-1; drawLowTextureValue&gt;=0; drawLowTextureValue-=1)
            {
            draw_primitive_begin_texture(pr_trianglefan,sprite_get_texture(spr_textureSheet,ds_grid_get(lowTextureGrid[i],0,drawLowTextureValue)))
            var drawTexturePointValue=1
            for (drawTexturePointValue=1; drawTexturePointValue&lt;ds_grid_width(lowTextureGrid[i]) and ds_grid_get(lowTextureGrid[i],drawTexturePointValue,drawLowTextureValue)!="empty"; drawTexturePointValue+=2)
                draw_vertex_texture(ds_grid_get(lowTextureGrid[i],drawTexturePointValue,drawLowTextureValue)-sectorX[i]*sectorWidth,ds_grid_get(lowTextureGrid[i],drawTexturePointValue+1,drawLowTextureValue)-(sectorY[i]+(layer[i]-1)*maxSectorY)*sectorHeight,(ds_grid_get(lowTextureGrid[i],drawTexturePointValue,drawLowTextureValue)-sectorX[i]*sectorWidth)/32,(ds_grid_get(lowTextureGrid[i],drawTexturePointValue+1,drawLowTextureValue)-(sectorY[i]+(layer[i]-1)*maxSectorY)*sectorHeight)/32)
            draw_primitive_end()
            }
        //darken
        shader_reset()
        draw_set_color(c_black)
        draw_set_blend_mode(bm_subtract)
        draw_set_alpha(0.5)
        draw_rectangle(0,0,sectorWidth*2,sectorHeight*2,false)
        
        //draw texture
        draw_set_alpha(1)
        draw_set_blend_mode(bm_normal)
        draw_set_color(c_white)
        var drawTextureValue=ds_grid_height(textureGrid[i])-1
        for (drawTextureValue=ds_grid_height(textureGrid[i])-1; drawTextureValue&gt;=0; drawTextureValue-=1)
            {
            draw_primitive_begin_texture(pr_trianglefan,sprite_get_texture(spr_textureSheet,ds_grid_get(textureGrid[i],0,drawTextureValue)))
            var drawTexturePointValue=1
            for (drawTexturePointValue=1; drawTexturePointValue&lt;ds_grid_width(textureGrid[i])-1 and ds_grid_get(textureGrid[i],drawTexturePointValue,drawTextureValue)!="empty"; drawTexturePointValue+=2)
                draw_vertex_texture(ds_grid_get(textureGrid[i],drawTexturePointValue,drawTextureValue)-sectorX[i]*sectorWidth,ds_grid_get(textureGrid[i],drawTexturePointValue+1,drawTextureValue)-(sectorY[i]+layer[i]*maxSectorY)*sectorHeight,(ds_grid_get(textureGrid[i],drawTexturePointValue,drawTextureValue)-sectorX[i]*sectorWidth)/32,(ds_grid_get(textureGrid[i],drawTexturePointValue+1,drawTextureValue)-(sectorY[i]+layer[i]*maxSectorY)*sectorHeight)/32)
            draw_primitive_end()
            }
            
        //draw details
        draw_set_color(c_dkgray)
        var drawDetailValue=0
        for (drawDetailValue=0; drawDetailValue&lt;ds_grid_height(detailGrid[i]); drawDetailValue+=1)
            {
            draw_line_width(ds_grid_get(detailGrid[i],0,drawDetailValue)-sectorX[i]*sectorWidth-1,ds_grid_get(detailGrid[i],1,drawDetailValue)-(sectorY[i]+layer[i]*maxSectorY)*sectorHeight-1,ds_grid_get(detailGrid[i],2,drawDetailValue)-sectorX[i]*sectorWidth-1,ds_grid_get(detailGrid[i],3,drawDetailValue)-(sectorY[i]+layer[i]*maxSectorY)*sectorHeight-1,2)
            draw_circle(ds_grid_get(detailGrid[i],0,drawDetailValue)-sectorX[i]*sectorWidth-1,ds_grid_get(detailGrid[i],1,drawDetailValue)-(sectorY[i]+layer[i]*maxSectorY)*sectorHeight-1,1,false)
            draw_circle(ds_grid_get(detailGrid[i],2,drawDetailValue)-sectorX[i]*sectorWidth-1,ds_grid_get(detailGrid[i],3,drawDetailValue)-(sectorY[i]+layer[i]*maxSectorY)*sectorHeight-1,1,false)
            }
        surface_reset_target()
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shadows + walls + hidden doors + fade

//shadows
draw_surface(shadowSurface[view_current],view_xview[view_current]-1,view_yview[view_current]-1)

//walls
draw_set_color(c_white)
for (var i=0; i&lt;ds_grid_height(wallGrid[view_current]); i+=1)
    {
    if ds_list_find_index(wallVisibleList,ds_grid_get(wallGrid[view_current],4,i))!=-1
        {
        draw_line_width(ds_grid_get(wallGrid[view_current],0,i),ds_grid_get(wallGrid[view_current],1,i),ds_grid_get(wallGrid[view_current],2,i),ds_grid_get(wallGrid[view_current],3,i),4)
        draw_circle(ds_grid_get(wallGrid[view_current],0,i),ds_grid_get(wallGrid[view_current],1,i),2,false)
        draw_circle(ds_grid_get(wallGrid[view_current],2,i),ds_grid_get(wallGrid[view_current],3,i),2,false)
        }
    }

///fade
if fade[view_current]=true
    fadeAlpha[view_current]+=0.1
else
    fadeAlpha[view_current]-=0.1
    
if fadeAlpha[view_current]&gt;=1.2
    fade[view_current]=false

fadeAlpha[view_current]=clamp(fadeAlpha[view_current],0,1.2)

draw_set_color(c_black)
draw_set_alpha(fadeAlpha[view_current])
draw_rectangle(view_xview[view_current]-16,view_yview[view_current]-16,view_xview[view_current]+view_wview[view_current]+16,view_yview[view_current]+view_hview[view_current]+16,false)
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG mp grid

if keyboard_check(ord("M"))
    {
    draw_set_alpha(0.5)
    mp_grid_draw(mpGrid[0])
    draw_set_alpha(1)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw textures + calculate dark texture surface + calculate shadows

//draw textures
//calculate flicker
if flickerDarkness&lt;=251 and irandom(30)=1
    flickerDarkness=255
else if flickerDarkness&gt;251
    flickerDarkness-=0.25

//draw texture surface
draw_surface_ext(textureSurface[view_current],sectorX[view_current]*sectorWidth,(sectorY[view_current]+layer[view_current]*maxSectorY)*sectorHeight,1,1,0,make_colour_rgb(flickerDarkness,flickerDarkness,flickerDarkness),1)

//calculate dark texture surface
if sectorChanged[view_current] or lightChanged[view_current]
    {
    //reset
    surface_set_target(darkTextureSurface[view_current])
    draw_clear_alpha(c_black,0)
    shader_set(shd_grayscale)
    draw_surface(textureSurface[view_current],0,0)
    shader_reset()
    
    //subtract lights
    draw_set_blend_mode(bm_subtract)
    with(class_light)
        {
        if loadedPlayer=view_current
            {
            draw_surface_ext(surface,x-range*0.975-obj_control.sectorX[view_current]*obj_control.sectorWidth,y-range*0.975-(obj_control.sectorY[view_current]+obj_control.layer[view_current]*obj_control.maxSectorY)*obj_control.sectorHeight,0.975,0.975,0,c_white,1)
            draw_surface_ext(surface,x-range-obj_control.sectorX[view_current]*obj_control.sectorWidth,y-range-(obj_control.sectorY[view_current]+obj_control.layer[view_current]*obj_control.maxSectorY)*obj_control.sectorHeight,1,1,0,c_white,0.7)
            }
        }
    draw_set_blend_mode(bm_normal)
    surface_reset_target()
    lightChanged[view_current]=false
    }

//draw dark texture surface
draw_surface(darkTextureSurface[view_current],sectorX[view_current]*sectorWidth,(sectorY[view_current]+layer[view_current]*maxSectorY)*sectorHeight)

//calculate shadows
draw_set_color(c_black)
surface_set_target(shadowSurface[view_current])
draw_clear_alpha(c_black,0)
scr_shadow(shadowObject[view_current].x,shadowObject[view_current].y,view_xview[view_current]-2,view_yview[view_current]-2,view_xview[view_current],view_yview[view_current],view_wview[view_current],view_hview[view_current],true,0)
surface_reset_target()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///menu UPDATE LATER

var drawMenuNumber=0
while drawMenuNumber&lt;players
    {
    if menuPressed[drawMenuNumber]=true
        menuDisplay[drawMenuNumber]=!menuDisplay[drawMenuNumber]
    if menuDisplay[drawMenuNumber]=true and menuAlpha[drawMenuNumber]&lt;1
        menuAlpha[drawMenuNumber]+=0.1
    else if menuDisplay[drawMenuNumber]=false and menuAlpha[drawMenuNumber]&gt;0
        menuAlpha[drawMenuNumber]-=0.1
    if menuAlpha[drawMenuNumber]&gt;0
        {
        var centerX=view_xport[drawMenuNumber]+view_wport[drawMenuNumber]/2
        var centerY=view_yport[drawMenuNumber]+view_hport[drawMenuNumber]/2
        
        if menuPageRightPressed[drawMenuNumber]=true
            menuPageIndex[drawMenuNumber]+=1
        if menuPageLeftPressed[drawMenuNumber]=true
            menuPageIndex[drawMenuNumber]-=1
        if menuPageIndex[drawMenuNumber]&gt;maxMenuPage
            menuPageIndex[drawMenuNumber]=1
        else if menuPageIndex[drawMenuNumber]&lt;1
            menuPageIndex[drawMenuNumber]=maxMenuPage
            
        draw_set_alpha(menuAlpha[drawMenuNumber]/1.5)
        draw_set_color(c_black)
        draw_rectangle(view_xport[drawMenuNumber],view_yport[drawMenuNumber],view_xport[drawMenuNumber]+view_wport[drawMenuNumber],view_yport[drawMenuNumber]+view_hport[drawMenuNumber],false)
        draw_set_alpha(menuAlpha[drawMenuNumber])
        draw_set_color(c_white)
        draw_text(view_xport[drawMenuNumber]+128,view_yport[drawMenuNumber]+48,menuPage[menuPageIndex[drawMenuNumber]-1])
        draw_triangle(view_xport[drawMenuNumber]+32,view_yport[drawMenuNumber]+48,view_xport[drawMenuNumber]+48,view_yport[drawMenuNumber]+32,view_xport[drawMenuNumber]+48,view_yport[drawMenuNumber]+64,false)
        draw_text(view_xport[drawMenuNumber]+view_wport[drawMenuNumber]-128,view_yport[drawMenuNumber]+48,menuPage[menuPageIndex[drawMenuNumber]+1])
        draw_triangle(view_xport[drawMenuNumber]+view_wport[drawMenuNumber]-32,view_yport[drawMenuNumber]+48,view_xport[drawMenuNumber]+view_wport[drawMenuNumber]-48,view_yport[drawMenuNumber]+32,view_xport[drawMenuNumber]+view_wport[drawMenuNumber]-48,view_yport[drawMenuNumber]+64,false)
        
        //document menu
        if menuPage[menuPageIndex[drawMenuNumber]]="Documents"
            {
            if menuUp[drawMenuNumber]=true
                {
                menuDocumentSelect[drawMenuNumber]-=1
                if menuDocumentSelect[drawMenuNumber]&lt;0
                    menuDocumentSelect[drawMenuNumber]=array_length_1d(document)-2
                }
            else if menuDown[drawMenuNumber]=true
                {
                menuDocumentSelect[drawMenuNumber]+=1
                if menuDocumentSelect[drawMenuNumber]&gt;=array_length_1d(document)-1
                    menuDocumentSelect[drawMenuNumber]=0
                }
            if obj_control.input[drawMenuNumber]=-1 and mouse_check_button_pressed(mb_left)
                {
                var mouseYTest=0
                while mouseYTest&lt;array_length_1d(document)-1
                    {
                    if device_mouse_raw_x(0)&lt;view_xport[drawMenuNumber]+view_wport[drawMenuNumber]/4+200 and device_mouse_raw_x(0)&gt;view_xport[drawMenuNumber]+view_wport[drawMenuNumber]/4-200
                        {
                        if abs(device_mouse_raw_y(0)-(centerY+(mouseYTest+1-array_length_1d(document)/2)*54))&lt;25
                            menuDocumentSelect[drawMenuNumber]=mouseYTest
                        }
                    mouseYTest+=1
                    }
                }
            draw_set_color(c_white)
            draw_line_width(centerX,view_yport[drawMenuNumber]+view_hport[drawMenuNumber]/6,centerX,view_yport[drawMenuNumber]+view_hport[drawMenuNumber]/12*11,4)
            draw_circle(centerX,view_yport[drawMenuNumber]+view_hport[drawMenuNumber]/6,2,false)
            draw_circle(centerX,view_yport[drawMenuNumber]+view_hport[drawMenuNumber]/12*11,2,false) 
            draw_set_font(fn_title)
            draw_text(centerX,view_yport[drawMenuNumber]+100,"Documents")
            var menuDocumentSelectX=view_xport[drawMenuNumber]+view_wport[drawMenuNumber]/4-200
            var menuDocumentSelectY=centerY+(menuDocumentSelect[drawMenuNumber]+1-array_length_1d(document)/2)*54
            draw_triangle(menuDocumentSelectX+10,menuDocumentSelectY,menuDocumentSelectX,menuDocumentSelectY-10,menuDocumentSelectX,menuDocumentSelectY+10,false)
            draw_set_font(fn_basic)
            var drawDocumentTitleValue=0
            while drawDocumentTitleValue&lt;array_length_1d(document)-1
                {
                if document[drawDocumentTitleValue]=true
                    {
                    draw_text(view_xport[drawMenuNumber]+view_wport[drawMenuNumber]/4,centerY+(drawDocumentTitleValue+1-array_length_1d(document)/2)*54,documentTitle[drawDocumentTitleValue])
                    if drawDocumentTitleValue=menuDocumentSelect[drawMenuNumber]
                        draw_text(view_xport[drawMenuNumber]+3*view_wport[drawMenuNumber]/4,centerY,documentText[menuDocumentSelect[drawMenuNumber]])
                    }
                else
                    draw_text(view_xport[drawMenuNumber]+view_wport[drawMenuNumber]/4,centerY+(drawDocumentTitleValue+1-array_length_1d(document)/2)*54,"???")
                drawDocumentTitleValue+=1
                }
            }
            
        //runes menu
        if menuPage[menuPageIndex[drawMenuNumber]]="Runes"
            {
            var circleIndex=0
            for (var angle=90; angle&lt;450; angle+=72)
                {
                draw_set_color(c_white)
                var circleX=centerX+lengthdir_x(view_wport[drawMenuNumber]/5,angle)
                var circleY=centerY+lengthdir_y(view_wport[drawMenuNumber]/5,angle)
                draw_circle(circleX,circleY,72,false)
                draw_circle_colour(circleX,circleY,68,c_black,c_black,false)
                
                if rune[0]=true and angle=90
                    draw_sprite_ext(spr_runeFarsight,0,circleX,circleY,2,2,0,c_white,menuAlpha[drawMenuNumber])
                else if rune[1]=true and angle=90+72
                    draw_sprite_ext(spr_runeWarp,0,circleX,circleY,2,2,0,c_white,menuAlpha[drawMenuNumber])
                else if rune[2]=true and angle=90+72*2
                    draw_sprite_ext(spr_runeNoise,0,circleX,circleY,2,2,0,c_white,menuAlpha[drawMenuNumber])
                
                shader_set(shd_grayscale)
                if obj_dagger1.runeNumber=circleIndex and drawMenuNumber=0
                    draw_sprite_ext(spr_daggerIdle,0,circleX+96,circleY,4,4,0,c_white,menuAlpha[drawMenuNumber])
                if obj_dagger2.runeNumber=circleIndex
                    {
                    if players=1
                        draw_sprite_ext(spr_daggerIdle,0,circleX-96,circleY,-4,4,0,c_white,menuAlpha[drawMenuNumber])
                    else if players=2 and drawMenuNumber=1
                        draw_sprite_ext(spr_daggerIdle,0,circleX-96,circleY,-4,4,0,c_white,menuAlpha[drawMenuNumber])
                    }
                    
                shader_reset()
                
                circleIndex+=1
                }
            if input[drawMenuNumber]=-1
                pointDirection[drawMenuNumber]=point_direction(centerX,centerY,window_mouse_get_x(),window_mouse_get_y())
            else if input[drawMenuNumber]&gt;=0 and (horizontalControlDeadzoneLeft[drawMenuNumber]!=0 or verticalControlDeadzoneLeft[drawMenuNumber]!=0)
                pointDirection[drawMenuNumber]=point_direction(0,0,horizontalControlLeft[drawMenuNumber],verticalControlLeft[drawMenuNumber])
            draw_triangle(centerX+lengthdir_x(4,pointDirection[drawMenuNumber]+90),centerY+lengthdir_y(4,pointDirection[drawMenuNumber]+90),centerX+lengthdir_x(4,pointDirection[drawMenuNumber]-90),centerY+lengthdir_y(4,pointDirection[drawMenuNumber]-90),centerX+lengthdir_x(view_wport[drawMenuNumber]/5-72,pointDirection[drawMenuNumber]),centerY+lengthdir_y(view_wport[drawMenuNumber]/5-72,pointDirection[drawMenuNumber]),false)
            draw_circle(centerX,centerY,4,false)
            
            var selected=round((pointDirection[drawMenuNumber]-90)/72)
            if selected&lt;0
                selected+=5
            draw_circle(centerX+lengthdir_x(view_wport[drawMenuNumber]/5,selected*72+90),centerY+lengthdir_y(view_wport[drawMenuNumber]/5,selected*72+90),80,true)
            
            if daggerPressedRight[drawMenuNumber]
                {
                if players=1 and drawMenuNumber=0 and (obj_dagger1.state="neutral" or obj_dagger1.state="aiming")
                    {
                    obj_dagger1.runeNumber=selected
                    menuFlash[drawMenuNumber]=1
                    }
                else if players=2 and drawMenuNumber=1 and (obj_dagger2.state="neutral" or obj_dagger2.state="aiming")
                    {
                    obj_dagger2.runeNumber=selected
                    menuFlash[drawMenuNumber]=1
                    }
                }
            else if daggerPressedLeft[drawMenuNumber]
                {
                if players=1 and drawMenuNumber=0 and (obj_dagger2.state="neutral" or obj_dagger2.state="aiming")
                    {
                    obj_dagger2.runeNumber=selected
                    menuFlash[drawMenuNumber]=1
                    }
                }
            } 
        }
    drawMenuNumber+=1
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///messsage REFACTOR/UPDATE?
draw_set_color(c_white)
draw_set_font(fn_message)

var drawMessageNumber=0
while drawMessageNumber&lt;players
    {
    if displayMessage[drawMessageNumber]=true
        messageAlpha[drawMessageNumber]+=0.1
    if messageAlpha[drawMessageNumber]&gt;=1 and displayMessage[drawMessageNumber]=true
        {
        displayMessage[drawMessageNumber]=false
        alarm_set(3+drawMessageNumber,120)
        }
    if displayMessage[drawMessageNumber]=false and alarm_get(3+drawMessageNumber)&lt;=0
        messageAlpha[drawMessageNumber]-=0.1
    messageAlpha[drawMessageNumber]=clamp(messageAlpha[drawMessageNumber],0,1)
    if messageAlpha&gt;0
        {
        draw_set_alpha(messageAlpha[drawMessageNumber])
        draw_text(view_xport[drawMessageNumber]+view_wport[drawMessageNumber]/5,view_yport[drawMessageNumber]+view_hport[drawMessageNumber]/10*9,message[drawMessageNumber])
        draw_set_alpha(1)
        }
    drawMessageNumber+=1
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG player 1 position

draw_text(64,32,obj_player1.x)
draw_text(64,64,obj_player1.y)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG sector and layer

draw_text(64,256,"X: "+string(sectorX[0]))
draw_text(64,256+64,"Y: "+string(sectorY[0]))
draw_text(64,256+128,"L: "+string(layer[0]))
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEST death (DEACTIVATED)
/*
if deathFade=true
    deathAlpha+=0.05
else
    deathAlpha-=0.05
deathAlpha=clamp(deathAlpha,0,1.1)    

if deathAlpha&gt;1
    {
    //clear progression
    key[0]=false
    key[1]=false
    
    document[0]=false
    document[1]=false
    document[3]=false
    
    rune[0]=false
    
    layer[1]=0
    
    //destroy particles
    part_system_clear(sys_interactable)
    part_system_clear(sys_fire)
    part_system_clear(sys_leaves)
    part_system_clear(sys_rune)
    part_system_clear(sys_daggerRune)
    
    //reset door grids
    with(class_door)
        {
        ds_grid_set(obj_control.wallGrid,gridValue,0,0)
        ds_grid_set(obj_control.wallGrid,gridValue,1,0)
        ds_grid_set(obj_control.wallGrid,gridValue,2,0)
        ds_grid_set(obj_control.wallGrid,gridValue,3,0)
        }
    
    //destroy objects
    with(all)
        {
        if object_index!=obj_control
            instance_destroy()
        }
    
    //recreate objects
    ini_open("levelData.ini")
    var objectCreateGrid=ds_grid_create(0,0)
    ds_grid_read(objectCreateGrid,ini_read_string("data","instance",""))
    var objectCreateValue=0
    while objectCreateValue&lt;ds_grid_height(objectCreateGrid)
        {
        objectAngle=ds_grid_get(objectCreateGrid,3,objectCreateValue);
        instance_create(ds_grid_get(objectCreateGrid,1,objectCreateValue),ds_grid_get(objectCreateGrid,2,objectCreateValue),asset_get_index(ds_grid_get(objectCreateGrid,0,objectCreateValue)))
        objectCreateValue+=1
        }
    objectAngle=0
    ds_grid_destroy(objectCreateGrid)
    ini_close()
    
    deathFade=false
    }
    
draw_set_color(c_black)
draw_set_alpha(deathAlpha)
draw_rectangle(0,0,1920,1080,false)
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG view position (DEACTIVATED)
/*
draw_text(64,32,view_xview[0])
draw_text(64,64,view_yview[0])
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG light changed DEACTIVATED

//draw_text(500,500,lightChanged[0])
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG instance level data DEACTIVATED
/*
draw_set_color(c_green)
for (var i=0; i&lt;ds_grid_height(instanceGrid[0]); i++)
    {
    for (var j=0; j&lt;ds_grid_width(instanceGrid[0]); j++)
        draw_text(500+j*250,500+i*50,ds_grid_get(instanceGrid[0],j,i))
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
